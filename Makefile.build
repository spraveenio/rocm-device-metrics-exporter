# holds all the docker container image builders required for components

WORK_DIR := /usr/src/github.com/ROCm/device-metrics-exporter/
SMILIB_CONTAINER_WORKDIR := ${WORK_DIR}
AMDMSMI_SRC_DIR := $(TOP_DIR)/
AMDSMI_BUILD_DIR := $(TOP_DIR)/tools/smilib-builderimage/
GPUAGENT_SRC_DIR := $(TOP_DIR)/gpuagent/
GPUAGENT_BUILD_DIR := $(TOP_DIR)/tools/gpuagent-builderimage/
GPUAGENT_OUT_DIR := $(TOP_DIR)/gpuagent/sw/nic/build/x86_64/sim/bin/
GPUAGENT_CONTAINER_WORKDIR := /usr/src/github.com/ROCm/gpu-agent/
ASSET_COPY_SCRIPT := $(TOP_DIR)/tools/scripts/copy_buildasset_gpuagent.sh
ROCPROFILER_CONTAINER_WORKDIR := ${WORK_DIR}/rocprofilerclient
ROCPROFILER_BUILD_DIR := $(TOP_DIR)/tools/rocprofiler-builderimage/
ROCPROFILER_SRC_DIR := $(TOP_DIR)/rocprofilerclient/
ROCPROFILER_ASSET_BLD_DIR := $(ROCPROFILER_SRC_DIR)/build/
ROCPROFILER_ASSET_DIR := $(ASSETS_PATH)/rocprofiler/

# this is usually required once for expediting the compilation

# these create docker container images for the compilation of respective OS libraries 
.PHONY: amdsmi-build
amdsmi-build:
ifeq ($(OS), RHEL9)
	$(eval DOCKERFILE=$(AMDSMI_BUILD_DIR)/Dockerfile.rhel9.4)
	$(eval BUILDER_IMAGE=$(AMDSMI_BUILDER_IMAGE))
	$(eval BASE_IMAGE=${AMDSMI_BASE_IMAGE})
else ifeq ($(OS), UBUNTU22)
	$(eval DOCKERFILE=$(AMDSMI_BUILD_DIR)/Dockerfile.ubuntu22)
	$(eval BUILDER_IMAGE=$(AMDSMI_BUILDER_UB22_IMAGE))
	$(eval BASE_IMAGE=${AMDSMI_BASE_UBUNTU22})
else ifeq ($(OS), UBUNTU24)
	$(eval DOCKERFILE=$(AMDSMI_BUILD_DIR)/Dockerfile.ubuntu24)
	$(eval BUILDER_IMAGE=$(AMDSMI_BUILDER_UB24_IMAGE))
	$(eval BASE_IMAGE=${AMDSMI_BASE_UBUNTU24})
else ifeq ($(OS), AZURE3)
	$(eval DOCKERFILE=$(AMDSMI_BUILD_DIR)/Dockerfile.azure)
	$(eval BUILDER_IMAGE=$(AMDSMI_BUILDER_AZURE_IMAGE))
	$(eval BASE_IMAGE=${AMDSMI_BASE_AZURE})
else
	$(error unsupported os)
endif
	@echo "Building amdsmi $(OS), $(DOCKERFILE), $(BUILDER_IMAGE), $(BASE_IMAGE)"
	@docker image rm $(BUILDER_IMAGE) || true
	@docker build --build-arg BUILD_BASE_IMAGE=${BASE_IMAGE} \
		-t $(BUILDER_IMAGE) . -f $(DOCKERFILE)

.PHONY: amdsmi-build-rhel
amdsmi-build-rhel:
	OS=RHEL9 ${MAKE} amdsmi-build

.PHONY: amdsmi-build-ub22
amdsmi-build-ub22:
	OS=UBUNTU22 ${MAKE} amdsmi-build

.PHONY: amdsmi-build-ub24
amdsmi-build-ub24:
	OS=UBUNTU24 ${MAKE} amdsmi-build

.PHONY: amdsmi-build-azure
amdsmi-build-azure:
	OS=AZURE3 ${MAKE} amdsmi-build

# creates a container image required for gpuagent build tools necessary for
# compilation
.PHONY: gpuagent-build
gpuagent-build:
	@docker image rm $(GPUAGENT_BUILDER_IMAGE) || true
	@docker build --build-arg BUILD_BASE_IMAGE=$(GPUAGENT_BASE_IMAGE) \
		-t $(GPUAGENT_BUILDER_IMAGE) \
		. -f $(GPUAGENT_BUILD_DIR)/Dockerfile-u22.04

# for debugging or developing with shell for gpuagent codebase
.PHONY: gpuagent-shell
gpuagent-shell:
	@docker run --rm -it --privileged \
		-e "USER_NAME=$(shell whoami)" \
		-e "USER_UID=$(shell id -u)" \
		-e "USER_GID=$(shell id -g)" \
		--name gpuagentbuild -v $(GPUAGENT_SRC_DIR):$(GPUAGENT_CONTAINER_WORKDIR) \
		-w $(GPUAGENT_CONTAINER_WORKDIR) --entrypoint bash $(GPUAGENT_BUILDER_IMAGE)

.PHONY: rocprofiler-build
rocprofiler-build:
	@docker image rm $(ROCPROFILER_BUILDER_IMAGE) || true
	@docker build --build-arg BUILD_BASE_IMAGE=$(ROCPROFILER_BASE_UBUNTU22) \
		-t $(ROCPROFILER_BUILDER_IMAGE) \
		 . -f $(ROCPROFILER_BUILD_DIR)/Dockerfile.ubuntu22

