//
//Copyright (c) Advanced Micro Devices, Inc. All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the \"License\");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an \"AS IS\" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

//----------------------------------------------------------------------------
///
/// \file
/// AMD Metrics Exporter configs
///
//----------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: exporterconfig.proto

package exportermetrics

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GPUMetricField int32

const (
	GPUMetricField_GPU_NODES_TOTAL             GPUMetricField = 0
	GPUMetricField_GPU_PACKAGE_POWER           GPUMetricField = 1
	GPUMetricField_GPU_AVERAGE_PACKAGE_POWER   GPUMetricField = 2
	GPUMetricField_GPU_EDGE_TEMPERATURE        GPUMetricField = 3
	GPUMetricField_GPU_JUNCTION_TEMPERATURE    GPUMetricField = 4
	GPUMetricField_GPU_MEMORY_TEMPERATURE      GPUMetricField = 5
	GPUMetricField_GPU_HBM_TEMPERATURE         GPUMetricField = 6
	GPUMetricField_GPU_GFX_ACTIVITY            GPUMetricField = 7
	GPUMetricField_GPU_UMC_ACTIVITY            GPUMetricField = 8
	GPUMetricField_GPU_MMA_ACTIVITY            GPUMetricField = 9
	GPUMetricField_GPU_VCN_ACTIVITY            GPUMetricField = 10
	GPUMetricField_GPU_JPEG_ACTIVITY           GPUMetricField = 11
	GPUMetricField_GPU_VOLTAGE                 GPUMetricField = 12
	GPUMetricField_GPU_GFX_VOLTAGE             GPUMetricField = 13
	GPUMetricField_GPU_MEMORY_VOLTAGE          GPUMetricField = 14
	GPUMetricField_PCIE_SPEED                  GPUMetricField = 15
	GPUMetricField_PCIE_MAX_SPEED              GPUMetricField = 16
	GPUMetricField_PCIE_BANDWIDTH              GPUMetricField = 17
	GPUMetricField_GPU_ENERGY_CONSUMED         GPUMetricField = 18
	GPUMetricField_PCIE_REPLAY_COUNT           GPUMetricField = 19
	GPUMetricField_PCIE_RECOVERY_COUNT         GPUMetricField = 20
	GPUMetricField_PCIE_REPLAY_ROLLOVER_COUNT  GPUMetricField = 21
	GPUMetricField_PCIE_NACK_SENT_COUNT        GPUMetricField = 22
	GPUMetricField_PCIE_NAC_RECEIVED_COUNT     GPUMetricField = 23
	GPUMetricField_GPU_CLOCK                   GPUMetricField = 24
	GPUMetricField_GPU_POWER_USAGE             GPUMetricField = 25
	GPUMetricField_GPU_TOTAL_VRAM              GPUMetricField = 26
	GPUMetricField_GPU_ECC_CORRECT_TOTAL       GPUMetricField = 27
	GPUMetricField_GPU_ECC_UNCORRECT_TOTAL     GPUMetricField = 28
	GPUMetricField_GPU_ECC_CORRECT_SDMA        GPUMetricField = 29
	GPUMetricField_GPU_ECC_UNCORRECT_SDMA      GPUMetricField = 30
	GPUMetricField_GPU_ECC_CORRECT_GFX         GPUMetricField = 31
	GPUMetricField_GPU_ECC_UNCORRECT_GFX       GPUMetricField = 32
	GPUMetricField_GPU_ECC_CORRECT_MMHUB       GPUMetricField = 33
	GPUMetricField_GPU_ECC_UNCORRECT_MMHUB     GPUMetricField = 34
	GPUMetricField_GPU_ECC_CORRECT_ATHUB       GPUMetricField = 35
	GPUMetricField_GPU_ECC_UNCORRECT_ATHUB     GPUMetricField = 36
	GPUMetricField_GPU_ECC_CORRECT_BIF         GPUMetricField = 37
	GPUMetricField_GPU_ECC_UNCORRECT_BIF       GPUMetricField = 38
	GPUMetricField_GPU_ECC_CORRECT_HDP         GPUMetricField = 39
	GPUMetricField_GPU_ECC_UNCORRECT_HDP       GPUMetricField = 40
	GPUMetricField_GPU_ECC_CORRECT_XGMI_WAFL   GPUMetricField = 41
	GPUMetricField_GPU_ECC_UNCORRECT_XGMI_WAFL GPUMetricField = 42
	GPUMetricField_GPU_ECC_CORRECT_DF          GPUMetricField = 43
	GPUMetricField_GPU_ECC_UNCORRECT_DF        GPUMetricField = 44
	GPUMetricField_GPU_ECC_CORRECT_SMN         GPUMetricField = 45
	GPUMetricField_GPU_ECC_UNCORRECT_SMN       GPUMetricField = 46
	GPUMetricField_GPU_ECC_CORRECT_SEM         GPUMetricField = 47
	GPUMetricField_GPU_ECC_UNCORRECT_SEM       GPUMetricField = 48
	GPUMetricField_GPU_ECC_CORRECT_MP0         GPUMetricField = 49
	GPUMetricField_GPU_ECC_UNCORRECT_MP0       GPUMetricField = 50
	GPUMetricField_GPU_ECC_CORRECT_MP1         GPUMetricField = 51
	GPUMetricField_GPU_ECC_UNCORRECT_MP1       GPUMetricField = 52
	GPUMetricField_GPU_ECC_CORRECT_FUSE        GPUMetricField = 53
	GPUMetricField_GPU_ECC_UNCORRECT_FUSE      GPUMetricField = 54
	GPUMetricField_GPU_ECC_CORRECT_UMC         GPUMetricField = 55
	GPUMetricField_GPU_ECC_UNCORRECT_UMC       GPUMetricField = 56
	GPUMetricField_GPU_XGMI_NBR_0_NOP_TX       GPUMetricField = 57
	GPUMetricField_GPU_XGMI_NBR_0_REQ_TX       GPUMetricField = 58
	GPUMetricField_GPU_XGMI_NBR_0_RESP_TX      GPUMetricField = 59
	GPUMetricField_GPU_XGMI_NBR_0_BEATS_TX     GPUMetricField = 60
	GPUMetricField_GPU_XGMI_NBR_1_NOP_TX       GPUMetricField = 61
	GPUMetricField_GPU_XGMI_NBR_1_REQ_TX       GPUMetricField = 62
	GPUMetricField_GPU_XGMI_NBR_1_RESP_TX      GPUMetricField = 63
	GPUMetricField_GPU_XGMI_NBR_1_BEATS_TX     GPUMetricField = 64
	GPUMetricField_GPU_XGMI_NBR_0_TX_THRPUT    GPUMetricField = 65
	GPUMetricField_GPU_XGMI_NBR_1_TX_THRPUT    GPUMetricField = 66
	GPUMetricField_GPU_XGMI_NBR_2_TX_THRPUT    GPUMetricField = 67
	GPUMetricField_GPU_XGMI_NBR_3_TX_THRPUT    GPUMetricField = 68
	GPUMetricField_GPU_XGMI_NBR_4_TX_THRPUT    GPUMetricField = 69
	GPUMetricField_GPU_XGMI_NBR_5_TX_THRPUT    GPUMetricField = 70
	GPUMetricField_GPU_USED_VRAM               GPUMetricField = 71
	GPUMetricField_GPU_FREE_VRAM               GPUMetricField = 72
	GPUMetricField_GPU_TOTAL_VISIBLE_VRAM      GPUMetricField = 73
	GPUMetricField_GPU_USED_VISIBLE_VRAM       GPUMetricField = 74
	GPUMetricField_GPU_FREE_VISIBLE_VRAM       GPUMetricField = 75
	GPUMetricField_GPU_TOTAL_GTT               GPUMetricField = 76
	GPUMetricField_GPU_USED_GTT                GPUMetricField = 77
	GPUMetricField_GPU_FREE_GTT                GPUMetricField = 78
	GPUMetricField_GPU_ECC_CORRECT_MCA         GPUMetricField = 79
	GPUMetricField_GPU_ECC_UNCORRECT_MCA       GPUMetricField = 80
	GPUMetricField_GPU_ECC_CORRECT_VCN         GPUMetricField = 81
	GPUMetricField_GPU_ECC_UNCORRECT_VCN       GPUMetricField = 82
	GPUMetricField_GPU_ECC_CORRECT_JPEG        GPUMetricField = 83
	GPUMetricField_GPU_ECC_UNCORRECT_JPEG      GPUMetricField = 84
	GPUMetricField_GPU_ECC_CORRECT_IH          GPUMetricField = 85
	GPUMetricField_GPU_ECC_UNCORRECT_IH        GPUMetricField = 86
	GPUMetricField_GPU_ECC_CORRECT_MPIO        GPUMetricField = 87
	GPUMetricField_GPU_ECC_UNCORRECT_MPIO      GPUMetricField = 88
	// 1 - healthy, 0 unhealthy
	GPUMetricField_GPU_HEALTH       GPUMetricField = 89
	GPUMetricField_GPU_XGMI_LINK_RX GPUMetricField = 90
	GPUMetricField_GPU_XGMI_LINK_TX GPUMetricField = 91
)

// Enum value maps for GPUMetricField.
var (
	GPUMetricField_name = map[int32]string{
		0:  "GPU_NODES_TOTAL",
		1:  "GPU_PACKAGE_POWER",
		2:  "GPU_AVERAGE_PACKAGE_POWER",
		3:  "GPU_EDGE_TEMPERATURE",
		4:  "GPU_JUNCTION_TEMPERATURE",
		5:  "GPU_MEMORY_TEMPERATURE",
		6:  "GPU_HBM_TEMPERATURE",
		7:  "GPU_GFX_ACTIVITY",
		8:  "GPU_UMC_ACTIVITY",
		9:  "GPU_MMA_ACTIVITY",
		10: "GPU_VCN_ACTIVITY",
		11: "GPU_JPEG_ACTIVITY",
		12: "GPU_VOLTAGE",
		13: "GPU_GFX_VOLTAGE",
		14: "GPU_MEMORY_VOLTAGE",
		15: "PCIE_SPEED",
		16: "PCIE_MAX_SPEED",
		17: "PCIE_BANDWIDTH",
		18: "GPU_ENERGY_CONSUMED",
		19: "PCIE_REPLAY_COUNT",
		20: "PCIE_RECOVERY_COUNT",
		21: "PCIE_REPLAY_ROLLOVER_COUNT",
		22: "PCIE_NACK_SENT_COUNT",
		23: "PCIE_NAC_RECEIVED_COUNT",
		24: "GPU_CLOCK",
		25: "GPU_POWER_USAGE",
		26: "GPU_TOTAL_VRAM",
		27: "GPU_ECC_CORRECT_TOTAL",
		28: "GPU_ECC_UNCORRECT_TOTAL",
		29: "GPU_ECC_CORRECT_SDMA",
		30: "GPU_ECC_UNCORRECT_SDMA",
		31: "GPU_ECC_CORRECT_GFX",
		32: "GPU_ECC_UNCORRECT_GFX",
		33: "GPU_ECC_CORRECT_MMHUB",
		34: "GPU_ECC_UNCORRECT_MMHUB",
		35: "GPU_ECC_CORRECT_ATHUB",
		36: "GPU_ECC_UNCORRECT_ATHUB",
		37: "GPU_ECC_CORRECT_BIF",
		38: "GPU_ECC_UNCORRECT_BIF",
		39: "GPU_ECC_CORRECT_HDP",
		40: "GPU_ECC_UNCORRECT_HDP",
		41: "GPU_ECC_CORRECT_XGMI_WAFL",
		42: "GPU_ECC_UNCORRECT_XGMI_WAFL",
		43: "GPU_ECC_CORRECT_DF",
		44: "GPU_ECC_UNCORRECT_DF",
		45: "GPU_ECC_CORRECT_SMN",
		46: "GPU_ECC_UNCORRECT_SMN",
		47: "GPU_ECC_CORRECT_SEM",
		48: "GPU_ECC_UNCORRECT_SEM",
		49: "GPU_ECC_CORRECT_MP0",
		50: "GPU_ECC_UNCORRECT_MP0",
		51: "GPU_ECC_CORRECT_MP1",
		52: "GPU_ECC_UNCORRECT_MP1",
		53: "GPU_ECC_CORRECT_FUSE",
		54: "GPU_ECC_UNCORRECT_FUSE",
		55: "GPU_ECC_CORRECT_UMC",
		56: "GPU_ECC_UNCORRECT_UMC",
		57: "GPU_XGMI_NBR_0_NOP_TX",
		58: "GPU_XGMI_NBR_0_REQ_TX",
		59: "GPU_XGMI_NBR_0_RESP_TX",
		60: "GPU_XGMI_NBR_0_BEATS_TX",
		61: "GPU_XGMI_NBR_1_NOP_TX",
		62: "GPU_XGMI_NBR_1_REQ_TX",
		63: "GPU_XGMI_NBR_1_RESP_TX",
		64: "GPU_XGMI_NBR_1_BEATS_TX",
		65: "GPU_XGMI_NBR_0_TX_THRPUT",
		66: "GPU_XGMI_NBR_1_TX_THRPUT",
		67: "GPU_XGMI_NBR_2_TX_THRPUT",
		68: "GPU_XGMI_NBR_3_TX_THRPUT",
		69: "GPU_XGMI_NBR_4_TX_THRPUT",
		70: "GPU_XGMI_NBR_5_TX_THRPUT",
		71: "GPU_USED_VRAM",
		72: "GPU_FREE_VRAM",
		73: "GPU_TOTAL_VISIBLE_VRAM",
		74: "GPU_USED_VISIBLE_VRAM",
		75: "GPU_FREE_VISIBLE_VRAM",
		76: "GPU_TOTAL_GTT",
		77: "GPU_USED_GTT",
		78: "GPU_FREE_GTT",
		79: "GPU_ECC_CORRECT_MCA",
		80: "GPU_ECC_UNCORRECT_MCA",
		81: "GPU_ECC_CORRECT_VCN",
		82: "GPU_ECC_UNCORRECT_VCN",
		83: "GPU_ECC_CORRECT_JPEG",
		84: "GPU_ECC_UNCORRECT_JPEG",
		85: "GPU_ECC_CORRECT_IH",
		86: "GPU_ECC_UNCORRECT_IH",
		87: "GPU_ECC_CORRECT_MPIO",
		88: "GPU_ECC_UNCORRECT_MPIO",
		89: "GPU_HEALTH",
		90: "GPU_XGMI_LINK_RX",
		91: "GPU_XGMI_LINK_TX",
	}
	GPUMetricField_value = map[string]int32{
		"GPU_NODES_TOTAL":             0,
		"GPU_PACKAGE_POWER":           1,
		"GPU_AVERAGE_PACKAGE_POWER":   2,
		"GPU_EDGE_TEMPERATURE":        3,
		"GPU_JUNCTION_TEMPERATURE":    4,
		"GPU_MEMORY_TEMPERATURE":      5,
		"GPU_HBM_TEMPERATURE":         6,
		"GPU_GFX_ACTIVITY":            7,
		"GPU_UMC_ACTIVITY":            8,
		"GPU_MMA_ACTIVITY":            9,
		"GPU_VCN_ACTIVITY":            10,
		"GPU_JPEG_ACTIVITY":           11,
		"GPU_VOLTAGE":                 12,
		"GPU_GFX_VOLTAGE":             13,
		"GPU_MEMORY_VOLTAGE":          14,
		"PCIE_SPEED":                  15,
		"PCIE_MAX_SPEED":              16,
		"PCIE_BANDWIDTH":              17,
		"GPU_ENERGY_CONSUMED":         18,
		"PCIE_REPLAY_COUNT":           19,
		"PCIE_RECOVERY_COUNT":         20,
		"PCIE_REPLAY_ROLLOVER_COUNT":  21,
		"PCIE_NACK_SENT_COUNT":        22,
		"PCIE_NAC_RECEIVED_COUNT":     23,
		"GPU_CLOCK":                   24,
		"GPU_POWER_USAGE":             25,
		"GPU_TOTAL_VRAM":              26,
		"GPU_ECC_CORRECT_TOTAL":       27,
		"GPU_ECC_UNCORRECT_TOTAL":     28,
		"GPU_ECC_CORRECT_SDMA":        29,
		"GPU_ECC_UNCORRECT_SDMA":      30,
		"GPU_ECC_CORRECT_GFX":         31,
		"GPU_ECC_UNCORRECT_GFX":       32,
		"GPU_ECC_CORRECT_MMHUB":       33,
		"GPU_ECC_UNCORRECT_MMHUB":     34,
		"GPU_ECC_CORRECT_ATHUB":       35,
		"GPU_ECC_UNCORRECT_ATHUB":     36,
		"GPU_ECC_CORRECT_BIF":         37,
		"GPU_ECC_UNCORRECT_BIF":       38,
		"GPU_ECC_CORRECT_HDP":         39,
		"GPU_ECC_UNCORRECT_HDP":       40,
		"GPU_ECC_CORRECT_XGMI_WAFL":   41,
		"GPU_ECC_UNCORRECT_XGMI_WAFL": 42,
		"GPU_ECC_CORRECT_DF":          43,
		"GPU_ECC_UNCORRECT_DF":        44,
		"GPU_ECC_CORRECT_SMN":         45,
		"GPU_ECC_UNCORRECT_SMN":       46,
		"GPU_ECC_CORRECT_SEM":         47,
		"GPU_ECC_UNCORRECT_SEM":       48,
		"GPU_ECC_CORRECT_MP0":         49,
		"GPU_ECC_UNCORRECT_MP0":       50,
		"GPU_ECC_CORRECT_MP1":         51,
		"GPU_ECC_UNCORRECT_MP1":       52,
		"GPU_ECC_CORRECT_FUSE":        53,
		"GPU_ECC_UNCORRECT_FUSE":      54,
		"GPU_ECC_CORRECT_UMC":         55,
		"GPU_ECC_UNCORRECT_UMC":       56,
		"GPU_XGMI_NBR_0_NOP_TX":       57,
		"GPU_XGMI_NBR_0_REQ_TX":       58,
		"GPU_XGMI_NBR_0_RESP_TX":      59,
		"GPU_XGMI_NBR_0_BEATS_TX":     60,
		"GPU_XGMI_NBR_1_NOP_TX":       61,
		"GPU_XGMI_NBR_1_REQ_TX":       62,
		"GPU_XGMI_NBR_1_RESP_TX":      63,
		"GPU_XGMI_NBR_1_BEATS_TX":     64,
		"GPU_XGMI_NBR_0_TX_THRPUT":    65,
		"GPU_XGMI_NBR_1_TX_THRPUT":    66,
		"GPU_XGMI_NBR_2_TX_THRPUT":    67,
		"GPU_XGMI_NBR_3_TX_THRPUT":    68,
		"GPU_XGMI_NBR_4_TX_THRPUT":    69,
		"GPU_XGMI_NBR_5_TX_THRPUT":    70,
		"GPU_USED_VRAM":               71,
		"GPU_FREE_VRAM":               72,
		"GPU_TOTAL_VISIBLE_VRAM":      73,
		"GPU_USED_VISIBLE_VRAM":       74,
		"GPU_FREE_VISIBLE_VRAM":       75,
		"GPU_TOTAL_GTT":               76,
		"GPU_USED_GTT":                77,
		"GPU_FREE_GTT":                78,
		"GPU_ECC_CORRECT_MCA":         79,
		"GPU_ECC_UNCORRECT_MCA":       80,
		"GPU_ECC_CORRECT_VCN":         81,
		"GPU_ECC_UNCORRECT_VCN":       82,
		"GPU_ECC_CORRECT_JPEG":        83,
		"GPU_ECC_UNCORRECT_JPEG":      84,
		"GPU_ECC_CORRECT_IH":          85,
		"GPU_ECC_UNCORRECT_IH":        86,
		"GPU_ECC_CORRECT_MPIO":        87,
		"GPU_ECC_UNCORRECT_MPIO":      88,
		"GPU_HEALTH":                  89,
		"GPU_XGMI_LINK_RX":            90,
		"GPU_XGMI_LINK_TX":            91,
	}
)

func (x GPUMetricField) Enum() *GPUMetricField {
	p := new(GPUMetricField)
	*p = x
	return p
}

func (x GPUMetricField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPUMetricField) Descriptor() protoreflect.EnumDescriptor {
	return file_exporterconfig_proto_enumTypes[0].Descriptor()
}

func (GPUMetricField) Type() protoreflect.EnumType {
	return &file_exporterconfig_proto_enumTypes[0]
}

func (x GPUMetricField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPUMetricField.Descriptor instead.
func (GPUMetricField) EnumDescriptor() ([]byte, []int) {
	return file_exporterconfig_proto_rawDescGZIP(), []int{0}
}

type GPUMetricLabel int32

const (
	GPUMetricLabel_GPU_UUID GPUMetricLabel = 0
	// mandatory SERIAL_NUMBER cannot be disabled
	GPUMetricLabel_SERIAL_NUMBER GPUMetricLabel = 1
	// mandatory field GPU_ID cannot be disabled
	GPUMetricLabel_GPU_ID        GPUMetricLabel = 2
	GPUMetricLabel_POD           GPUMetricLabel = 3
	GPUMetricLabel_NAMESPACE     GPUMetricLabel = 4
	GPUMetricLabel_CONTAINER     GPUMetricLabel = 5
	GPUMetricLabel_JOB_ID        GPUMetricLabel = 6
	GPUMetricLabel_JOB_USER      GPUMetricLabel = 7
	GPUMetricLabel_JOB_PARTITION GPUMetricLabel = 8
	GPUMetricLabel_CLUSTER_NAME  GPUMetricLabel = 9
	GPUMetricLabel_CARD_SERIES   GPUMetricLabel = 10
	// mandatory CARD_MODEL cannot be disabled
	GPUMetricLabel_CARD_MODEL     GPUMetricLabel = 11
	GPUMetricLabel_CARD_VENDOR    GPUMetricLabel = 12
	GPUMetricLabel_DRIVER_VERSION GPUMetricLabel = 13
	GPUMetricLabel_VBIOS_VERSION  GPUMetricLabel = 14
	// mandatory field HOSTNAME cannot be disabled
	GPUMetricLabel_HOSTNAME GPUMetricLabel = 15
	// mandatory field GPU_PARTITION_ID cannot be disabled
	GPUMetricLabel_GPU_PARTITION_ID GPUMetricLabel = 16
	// mandatory field GPU_COMPUTE_PARTITION_TYPE cannot be disabled
	GPUMetricLabel_GPU_COMPUTE_PARTITION_TYPE GPUMetricLabel = 17
)

// Enum value maps for GPUMetricLabel.
var (
	GPUMetricLabel_name = map[int32]string{
		0:  "GPU_UUID",
		1:  "SERIAL_NUMBER",
		2:  "GPU_ID",
		3:  "POD",
		4:  "NAMESPACE",
		5:  "CONTAINER",
		6:  "JOB_ID",
		7:  "JOB_USER",
		8:  "JOB_PARTITION",
		9:  "CLUSTER_NAME",
		10: "CARD_SERIES",
		11: "CARD_MODEL",
		12: "CARD_VENDOR",
		13: "DRIVER_VERSION",
		14: "VBIOS_VERSION",
		15: "HOSTNAME",
		16: "GPU_PARTITION_ID",
		17: "GPU_COMPUTE_PARTITION_TYPE",
	}
	GPUMetricLabel_value = map[string]int32{
		"GPU_UUID":                   0,
		"SERIAL_NUMBER":              1,
		"GPU_ID":                     2,
		"POD":                        3,
		"NAMESPACE":                  4,
		"CONTAINER":                  5,
		"JOB_ID":                     6,
		"JOB_USER":                   7,
		"JOB_PARTITION":              8,
		"CLUSTER_NAME":               9,
		"CARD_SERIES":                10,
		"CARD_MODEL":                 11,
		"CARD_VENDOR":                12,
		"DRIVER_VERSION":             13,
		"VBIOS_VERSION":              14,
		"HOSTNAME":                   15,
		"GPU_PARTITION_ID":           16,
		"GPU_COMPUTE_PARTITION_TYPE": 17,
	}
)

func (x GPUMetricLabel) Enum() *GPUMetricLabel {
	p := new(GPUMetricLabel)
	*p = x
	return p
}

func (x GPUMetricLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPUMetricLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_exporterconfig_proto_enumTypes[1].Descriptor()
}

func (GPUMetricLabel) Type() protoreflect.EnumType {
	return &file_exporterconfig_proto_enumTypes[1]
}

func (x GPUMetricLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPUMetricLabel.Descriptor instead.
func (GPUMetricLabel) EnumDescriptor() ([]byte, []int) {
	return file_exporterconfig_proto_rawDescGZIP(), []int{1}
}

type GPUHealthThresholds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GPU_ECC_UNCORRECT_SDMA      uint32 `protobuf:"varint,1,opt,name=GPU_ECC_UNCORRECT_SDMA,json=GPUECCUNCORRECTSDMA,proto3" json:"GPU_ECC_UNCORRECT_SDMA,omitempty"`
	GPU_ECC_UNCORRECT_GFX       uint32 `protobuf:"varint,2,opt,name=GPU_ECC_UNCORRECT_GFX,json=GPUECCUNCORRECTGFX,proto3" json:"GPU_ECC_UNCORRECT_GFX,omitempty"`
	GPU_ECC_UNCORRECT_MMHUB     uint32 `protobuf:"varint,3,opt,name=GPU_ECC_UNCORRECT_MMHUB,json=GPUECCUNCORRECTMMHUB,proto3" json:"GPU_ECC_UNCORRECT_MMHUB,omitempty"`
	GPU_ECC_UNCORRECT_ATHUB     uint32 `protobuf:"varint,4,opt,name=GPU_ECC_UNCORRECT_ATHUB,json=GPUECCUNCORRECTATHUB,proto3" json:"GPU_ECC_UNCORRECT_ATHUB,omitempty"`
	GPU_ECC_UNCORRECT_BIF       uint32 `protobuf:"varint,5,opt,name=GPU_ECC_UNCORRECT_BIF,json=GPUECCUNCORRECTBIF,proto3" json:"GPU_ECC_UNCORRECT_BIF,omitempty"`
	GPU_ECC_UNCORRECT_HDP       uint32 `protobuf:"varint,6,opt,name=GPU_ECC_UNCORRECT_HDP,json=GPUECCUNCORRECTHDP,proto3" json:"GPU_ECC_UNCORRECT_HDP,omitempty"`
	GPU_ECC_UNCORRECT_XGMI_WAFL uint32 `protobuf:"varint,7,opt,name=GPU_ECC_UNCORRECT_XGMI_WAFL,json=GPUECCUNCORRECTXGMIWAFL,proto3" json:"GPU_ECC_UNCORRECT_XGMI_WAFL,omitempty"`
	GPU_ECC_UNCORRECT_DF        uint32 `protobuf:"varint,8,opt,name=GPU_ECC_UNCORRECT_DF,json=GPUECCUNCORRECTDF,proto3" json:"GPU_ECC_UNCORRECT_DF,omitempty"`
	GPU_ECC_UNCORRECT_SMN       uint32 `protobuf:"varint,9,opt,name=GPU_ECC_UNCORRECT_SMN,json=GPUECCUNCORRECTSMN,proto3" json:"GPU_ECC_UNCORRECT_SMN,omitempty"`
	GPU_ECC_UNCORRECT_SEM       uint32 `protobuf:"varint,10,opt,name=GPU_ECC_UNCORRECT_SEM,json=GPUECCUNCORRECTSEM,proto3" json:"GPU_ECC_UNCORRECT_SEM,omitempty"`
	GPU_ECC_UNCORRECT_MP0       uint32 `protobuf:"varint,11,opt,name=GPU_ECC_UNCORRECT_MP0,json=GPUECCUNCORRECTMP0,proto3" json:"GPU_ECC_UNCORRECT_MP0,omitempty"`
	GPU_ECC_UNCORRECT_MP1       uint32 `protobuf:"varint,12,opt,name=GPU_ECC_UNCORRECT_MP1,json=GPUECCUNCORRECTMP1,proto3" json:"GPU_ECC_UNCORRECT_MP1,omitempty"`
	GPU_ECC_UNCORRECT_FUSE      uint32 `protobuf:"varint,13,opt,name=GPU_ECC_UNCORRECT_FUSE,json=GPUECCUNCORRECTFUSE,proto3" json:"GPU_ECC_UNCORRECT_FUSE,omitempty"`
	GPU_ECC_UNCORRECT_UMC       uint32 `protobuf:"varint,14,opt,name=GPU_ECC_UNCORRECT_UMC,json=GPUECCUNCORRECTUMC,proto3" json:"GPU_ECC_UNCORRECT_UMC,omitempty"`
	GPU_ECC_UNCORRECT_MCA       uint32 `protobuf:"varint,15,opt,name=GPU_ECC_UNCORRECT_MCA,json=GPUECCUNCORRECTMCA,proto3" json:"GPU_ECC_UNCORRECT_MCA,omitempty"`
	GPU_ECC_UNCORRECT_VCN       uint32 `protobuf:"varint,16,opt,name=GPU_ECC_UNCORRECT_VCN,json=GPUECCUNCORRECTVCN,proto3" json:"GPU_ECC_UNCORRECT_VCN,omitempty"`
	GPU_ECC_UNCORRECT_JPEG      uint32 `protobuf:"varint,17,opt,name=GPU_ECC_UNCORRECT_JPEG,json=GPUECCUNCORRECTJPEG,proto3" json:"GPU_ECC_UNCORRECT_JPEG,omitempty"`
	GPU_ECC_UNCORRECT_IH        uint32 `protobuf:"varint,18,opt,name=GPU_ECC_UNCORRECT_IH,json=GPUECCUNCORRECTIH,proto3" json:"GPU_ECC_UNCORRECT_IH,omitempty"`
	GPU_ECC_UNCORRECT_MPIO      uint32 `protobuf:"varint,19,opt,name=GPU_ECC_UNCORRECT_MPIO,json=GPUECCUNCORRECTMPIO,proto3" json:"GPU_ECC_UNCORRECT_MPIO,omitempty"`
}

func (x *GPUHealthThresholds) Reset() {
	*x = GPUHealthThresholds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exporterconfig_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUHealthThresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUHealthThresholds) ProtoMessage() {}

func (x *GPUHealthThresholds) ProtoReflect() protoreflect.Message {
	mi := &file_exporterconfig_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUHealthThresholds.ProtoReflect.Descriptor instead.
func (*GPUHealthThresholds) Descriptor() ([]byte, []int) {
	return file_exporterconfig_proto_rawDescGZIP(), []int{0}
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_SDMA() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_SDMA
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_GFX() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_GFX
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_MMHUB() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_MMHUB
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_ATHUB() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_ATHUB
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_BIF() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_BIF
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_HDP() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_HDP
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_XGMI_WAFL() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_XGMI_WAFL
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_DF() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_DF
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_SMN() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_SMN
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_SEM() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_SEM
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_MP0() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_MP0
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_MP1() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_MP1
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_FUSE() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_FUSE
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_UMC() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_UMC
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_MCA() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_MCA
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_VCN() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_VCN
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_JPEG() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_JPEG
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_IH() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_IH
	}
	return 0
}

func (x *GPUHealthThresholds) GetGPU_ECC_UNCORRECT_MPIO() uint32 {
	if x != nil {
		return x.GPU_ECC_UNCORRECT_MPIO
	}
	return 0
}

type GPUMetricConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instance selector can include comma or range indices of format 0,2-3,7
	Selector string `protobuf:"bytes,1,opt,name=Selector,proto3" json:"Selector,omitempty"`
	// list of all GPUMetricField to be exported
	Fields []string `protobuf:"bytes,2,rep,name=Fields,proto3" json:"Fields,omitempty"`
	// list of labels to be exported
	Labels []string `protobuf:"bytes,3,rep,name=Labels,proto3" json:"Labels,omitempty"`
	// GPU Health Thresholds
	HealthThresholds *GPUHealthThresholds `protobuf:"bytes,4,opt,name=HealthThresholds,proto3" json:"HealthThresholds,omitempty"`
	// User Defined Custom Labels and values
	CustomLabels map[string]string `protobuf:"bytes,5,rep,name=CustomLabels,proto3" json:"CustomLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GPUMetricConfig) Reset() {
	*x = GPUMetricConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exporterconfig_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUMetricConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUMetricConfig) ProtoMessage() {}

func (x *GPUMetricConfig) ProtoReflect() protoreflect.Message {
	mi := &file_exporterconfig_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUMetricConfig.ProtoReflect.Descriptor instead.
func (*GPUMetricConfig) Descriptor() ([]byte, []int) {
	return file_exporterconfig_proto_rawDescGZIP(), []int{1}
}

func (x *GPUMetricConfig) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *GPUMetricConfig) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GPUMetricConfig) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GPUMetricConfig) GetHealthThresholds() *GPUHealthThresholds {
	if x != nil {
		return x.HealthThresholds
	}
	return nil
}

func (x *GPUMetricConfig) GetCustomLabels() map[string]string {
	if x != nil {
		return x.CustomLabels
	}
	return nil
}

type MetricConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// server config port
	ServerPort uint32 `protobuf:"varint,1,opt,name=ServerPort,proto3" json:"ServerPort,omitempty"`
	// GPU Metric config for export
	GPUConfig *GPUMetricConfig `protobuf:"bytes,2,opt,name=GPUConfig,proto3" json:"GPUConfig,omitempty"`
}

func (x *MetricConfig) Reset() {
	*x = MetricConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exporterconfig_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricConfig) ProtoMessage() {}

func (x *MetricConfig) ProtoReflect() protoreflect.Message {
	mi := &file_exporterconfig_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricConfig.ProtoReflect.Descriptor instead.
func (*MetricConfig) Descriptor() ([]byte, []int) {
	return file_exporterconfig_proto_rawDescGZIP(), []int{2}
}

func (x *MetricConfig) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *MetricConfig) GetGPUConfig() *GPUMetricConfig {
	if x != nil {
		return x.GPUConfig
	}
	return nil
}

var File_exporterconfig_proto protoreflect.FileDescriptor

var file_exporterconfig_proto_rawDesc = []byte{
	0x0a, 0x14, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xf5, 0x07, 0x0a, 0x13, 0x47, 0x50, 0x55, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12,
	0x33, 0x0a, 0x16, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x44, 0x4d, 0x41, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x47, 0x50, 0x55, 0x45, 0x43, 0x43, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x53, 0x44, 0x4d, 0x41, 0x12, 0x31, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f,
	0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x46, 0x58, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x47, 0x50, 0x55, 0x45, 0x43, 0x43, 0x55, 0x4e, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x47, 0x46, 0x58, 0x12, 0x35, 0x0a, 0x17, 0x47, 0x50, 0x55, 0x5f, 0x45,
	0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x4d, 0x48,
	0x55, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x47, 0x50, 0x55, 0x45, 0x43, 0x43,
	0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x4d, 0x4d, 0x48, 0x55, 0x42, 0x12, 0x35,
	0x0a, 0x17, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x43, 0x54, 0x5f, 0x41, 0x54, 0x48, 0x55, 0x42, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x47, 0x50, 0x55, 0x45, 0x43, 0x43, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x41, 0x54, 0x48, 0x55, 0x42, 0x12, 0x31, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43,
	0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x49, 0x46, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x47, 0x50, 0x55, 0x45, 0x43, 0x43, 0x55, 0x4e, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x42, 0x49, 0x46, 0x12, 0x31, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f,
	0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x48, 0x44,
	0x50, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x47, 0x50, 0x55, 0x45, 0x43, 0x43, 0x55,
	0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x48, 0x44, 0x50, 0x12, 0x3c, 0x0a, 0x1b, 0x47,
	0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x5f, 0x58, 0x47, 0x4d, 0x49, 0x5f, 0x57, 0x41, 0x46, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x47, 0x50, 0x55, 0x45, 0x43, 0x43, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x58, 0x47, 0x4d, 0x49, 0x57, 0x41, 0x46, 0x4c, 0x12, 0x2f, 0x0a, 0x14, 0x47, 0x50, 0x55,
	0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x44,
	0x46, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x47, 0x50, 0x55, 0x45, 0x43, 0x43, 0x55,
	0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x44, 0x46, 0x12, 0x31, 0x0a, 0x15, 0x47, 0x50,
	0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x53, 0x4d, 0x4e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x47, 0x50, 0x55, 0x45, 0x43,
	0x43, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x53, 0x4d, 0x4e, 0x12, 0x31, 0x0a,
	0x15, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x53, 0x45, 0x4d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x47, 0x50,
	0x55, 0x45, 0x43, 0x43, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x53, 0x45, 0x4d,
	0x12, 0x31, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x50, 0x30, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x47, 0x50, 0x55, 0x45, 0x43, 0x43, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x4d, 0x50, 0x30, 0x12, 0x31, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55,
	0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x50, 0x31, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x47, 0x50, 0x55, 0x45, 0x43, 0x43, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x43, 0x54, 0x4d, 0x50, 0x31, 0x12, 0x33, 0x0a, 0x16, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43,
	0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x55, 0x53, 0x45,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x47, 0x50, 0x55, 0x45, 0x43, 0x43, 0x55, 0x4e,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x46, 0x55, 0x53, 0x45, 0x12, 0x31, 0x0a, 0x15, 0x47,
	0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x5f, 0x55, 0x4d, 0x43, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x47, 0x50, 0x55, 0x45,
	0x43, 0x43, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x55, 0x4d, 0x43, 0x12, 0x31,
	0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x43, 0x54, 0x5f, 0x4d, 0x43, 0x41, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x47,
	0x50, 0x55, 0x45, 0x43, 0x43, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x4d, 0x43,
	0x41, 0x12, 0x31, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x56, 0x43, 0x4e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x47, 0x50, 0x55, 0x45, 0x43, 0x43, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x56, 0x43, 0x4e, 0x12, 0x33, 0x0a, 0x16, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f,
	0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4a, 0x50, 0x45, 0x47, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x47, 0x50, 0x55, 0x45, 0x43, 0x43, 0x55, 0x4e, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x4a, 0x50, 0x45, 0x47, 0x12, 0x2f, 0x0a, 0x14, 0x47, 0x50, 0x55,
	0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x49,
	0x48, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x47, 0x50, 0x55, 0x45, 0x43, 0x43, 0x55,
	0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x49, 0x48, 0x12, 0x33, 0x0a, 0x16, 0x47, 0x50,
	0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x4d, 0x50, 0x49, 0x4f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x47, 0x50, 0x55, 0x45,
	0x43, 0x43, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x4d, 0x50, 0x49, 0x4f, 0x22,
	0xc8, 0x02, 0x0a, 0x0f, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x50, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x50, 0x55, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52,
	0x10, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x73, 0x12, 0x56, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6e, 0x0a, 0x0c, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x47, 0x50,
	0x55, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x47, 0x50, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x09, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2a, 0xae, 0x12, 0x0a, 0x0e, 0x47,
	0x50, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x13, 0x0a,
	0x0f, 0x47, 0x50, 0x55, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x50, 0x55, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47,
	0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x50, 0x55,
	0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45,
	0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x50, 0x55, 0x5f,
	0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x50, 0x55, 0x5f, 0x4a, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x04,
	0x12, 0x1a, 0x0a, 0x16, 0x47, 0x50, 0x55, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x54,
	0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13,
	0x47, 0x50, 0x55, 0x5f, 0x48, 0x42, 0x4d, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x50, 0x55, 0x5f, 0x47, 0x46, 0x58,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x47,
	0x50, 0x55, 0x5f, 0x55, 0x4d, 0x43, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10,
	0x08, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x50, 0x55, 0x5f, 0x4d, 0x4d, 0x41, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x50, 0x55, 0x5f, 0x56,
	0x43, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x0a, 0x12, 0x15, 0x0a,
	0x11, 0x47, 0x50, 0x55, 0x5f, 0x4a, 0x50, 0x45, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x50, 0x55, 0x5f, 0x56, 0x4f, 0x4c, 0x54,
	0x41, 0x47, 0x45, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x50, 0x55, 0x5f, 0x47, 0x46, 0x58,
	0x5f, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x50,
	0x55, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45,
	0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x43, 0x49, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x43, 0x49, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x43, 0x49, 0x45, 0x5f, 0x42,
	0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x50,
	0x55, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45,
	0x44, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x43, 0x49, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x43,
	0x49, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x14, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x43, 0x49, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x43, 0x49, 0x45, 0x5f, 0x4e, 0x41, 0x43, 0x4b,
	0x5f, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x16, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x43, 0x49, 0x45, 0x5f, 0x4e, 0x41, 0x43, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56,
	0x45, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x17, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x50,
	0x55, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x50, 0x55,
	0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x19, 0x12, 0x12,
	0x0a, 0x0e, 0x47, 0x50, 0x55, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x56, 0x52, 0x41, 0x4d,
	0x10, 0x1a, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x1b, 0x12, 0x1b, 0x0a,
	0x17, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x1c, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x50,
	0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x44,
	0x4d, 0x41, 0x10, 0x1d, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f,
	0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x44, 0x4d, 0x41, 0x10, 0x1e,
	0x12, 0x17, 0x0a, 0x13, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x43, 0x54, 0x5f, 0x47, 0x46, 0x58, 0x10, 0x1f, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x50, 0x55,
	0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x47,
	0x46, 0x58, 0x10, 0x20, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x4d, 0x48, 0x55, 0x42, 0x10, 0x21, 0x12,
	0x1b, 0x0a, 0x17, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x4d, 0x48, 0x55, 0x42, 0x10, 0x22, 0x12, 0x19, 0x0a, 0x15,
	0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x41, 0x54, 0x48, 0x55, 0x42, 0x10, 0x23, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x50, 0x55, 0x5f, 0x45,
	0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x54, 0x48,
	0x55, 0x42, 0x10, 0x24, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x49, 0x46, 0x10, 0x25, 0x12, 0x19, 0x0a,
	0x15, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x42, 0x49, 0x46, 0x10, 0x26, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x50, 0x55, 0x5f,
	0x45, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x48, 0x44, 0x50, 0x10,
	0x27, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x48, 0x44, 0x50, 0x10, 0x28, 0x12, 0x1d, 0x0a, 0x19,
	0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x58, 0x47, 0x4d, 0x49, 0x5f, 0x57, 0x41, 0x46, 0x4c, 0x10, 0x29, 0x12, 0x1f, 0x0a, 0x1b, 0x47,
	0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x5f, 0x58, 0x47, 0x4d, 0x49, 0x5f, 0x57, 0x41, 0x46, 0x4c, 0x10, 0x2a, 0x12, 0x16, 0x0a, 0x12,
	0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x44, 0x46, 0x10, 0x2b, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f,
	0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x46, 0x10, 0x2c, 0x12, 0x17,
	0x0a, 0x13, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x5f, 0x53, 0x4d, 0x4e, 0x10, 0x2d, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x45,
	0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x4d, 0x4e,
	0x10, 0x2e, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x4d, 0x10, 0x2f, 0x12, 0x19, 0x0a, 0x15, 0x47,
	0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x5f, 0x53, 0x45, 0x4d, 0x10, 0x30, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43,
	0x43, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x50, 0x30, 0x10, 0x31, 0x12,
	0x19, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x50, 0x30, 0x10, 0x32, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x50,
	0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x50,
	0x31, 0x10, 0x33, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55,
	0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x50, 0x31, 0x10, 0x34, 0x12, 0x18,
	0x0a, 0x14, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x5f, 0x46, 0x55, 0x53, 0x45, 0x10, 0x35, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x50, 0x55, 0x5f,
	0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x55,
	0x53, 0x45, 0x10, 0x36, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x4d, 0x43, 0x10, 0x37, 0x12, 0x19, 0x0a,
	0x15, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x55, 0x4d, 0x43, 0x10, 0x38, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f,
	0x58, 0x47, 0x4d, 0x49, 0x5f, 0x4e, 0x42, 0x52, 0x5f, 0x30, 0x5f, 0x4e, 0x4f, 0x50, 0x5f, 0x54,
	0x58, 0x10, 0x39, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x58, 0x47, 0x4d, 0x49, 0x5f,
	0x4e, 0x42, 0x52, 0x5f, 0x30, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x58, 0x10, 0x3a, 0x12, 0x1a,
	0x0a, 0x16, 0x47, 0x50, 0x55, 0x5f, 0x58, 0x47, 0x4d, 0x49, 0x5f, 0x4e, 0x42, 0x52, 0x5f, 0x30,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x54, 0x58, 0x10, 0x3b, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x50,
	0x55, 0x5f, 0x58, 0x47, 0x4d, 0x49, 0x5f, 0x4e, 0x42, 0x52, 0x5f, 0x30, 0x5f, 0x42, 0x45, 0x41,
	0x54, 0x53, 0x5f, 0x54, 0x58, 0x10, 0x3c, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x58,
	0x47, 0x4d, 0x49, 0x5f, 0x4e, 0x42, 0x52, 0x5f, 0x31, 0x5f, 0x4e, 0x4f, 0x50, 0x5f, 0x54, 0x58,
	0x10, 0x3d, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x58, 0x47, 0x4d, 0x49, 0x5f, 0x4e,
	0x42, 0x52, 0x5f, 0x31, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x58, 0x10, 0x3e, 0x12, 0x1a, 0x0a,
	0x16, 0x47, 0x50, 0x55, 0x5f, 0x58, 0x47, 0x4d, 0x49, 0x5f, 0x4e, 0x42, 0x52, 0x5f, 0x31, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x5f, 0x54, 0x58, 0x10, 0x3f, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x50, 0x55,
	0x5f, 0x58, 0x47, 0x4d, 0x49, 0x5f, 0x4e, 0x42, 0x52, 0x5f, 0x31, 0x5f, 0x42, 0x45, 0x41, 0x54,
	0x53, 0x5f, 0x54, 0x58, 0x10, 0x40, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x50, 0x55, 0x5f, 0x58, 0x47,
	0x4d, 0x49, 0x5f, 0x4e, 0x42, 0x52, 0x5f, 0x30, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x48, 0x52, 0x50,
	0x55, 0x54, 0x10, 0x41, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x50, 0x55, 0x5f, 0x58, 0x47, 0x4d, 0x49,
	0x5f, 0x4e, 0x42, 0x52, 0x5f, 0x31, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x48, 0x52, 0x50, 0x55, 0x54,
	0x10, 0x42, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x50, 0x55, 0x5f, 0x58, 0x47, 0x4d, 0x49, 0x5f, 0x4e,
	0x42, 0x52, 0x5f, 0x32, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x48, 0x52, 0x50, 0x55, 0x54, 0x10, 0x43,
	0x12, 0x1c, 0x0a, 0x18, 0x47, 0x50, 0x55, 0x5f, 0x58, 0x47, 0x4d, 0x49, 0x5f, 0x4e, 0x42, 0x52,
	0x5f, 0x33, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x48, 0x52, 0x50, 0x55, 0x54, 0x10, 0x44, 0x12, 0x1c,
	0x0a, 0x18, 0x47, 0x50, 0x55, 0x5f, 0x58, 0x47, 0x4d, 0x49, 0x5f, 0x4e, 0x42, 0x52, 0x5f, 0x34,
	0x5f, 0x54, 0x58, 0x5f, 0x54, 0x48, 0x52, 0x50, 0x55, 0x54, 0x10, 0x45, 0x12, 0x1c, 0x0a, 0x18,
	0x47, 0x50, 0x55, 0x5f, 0x58, 0x47, 0x4d, 0x49, 0x5f, 0x4e, 0x42, 0x52, 0x5f, 0x35, 0x5f, 0x54,
	0x58, 0x5f, 0x54, 0x48, 0x52, 0x50, 0x55, 0x54, 0x10, 0x46, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x50,
	0x55, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x56, 0x52, 0x41, 0x4d, 0x10, 0x47, 0x12, 0x11, 0x0a,
	0x0d, 0x47, 0x50, 0x55, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x56, 0x52, 0x41, 0x4d, 0x10, 0x48,
	0x12, 0x1a, 0x0a, 0x16, 0x47, 0x50, 0x55, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x56, 0x49,
	0x53, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x56, 0x52, 0x41, 0x4d, 0x10, 0x49, 0x12, 0x19, 0x0a, 0x15,
	0x47, 0x50, 0x55, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45,
	0x5f, 0x56, 0x52, 0x41, 0x4d, 0x10, 0x4a, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x46,
	0x52, 0x45, 0x45, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x56, 0x52, 0x41, 0x4d,
	0x10, 0x4b, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x50, 0x55, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f,
	0x47, 0x54, 0x54, 0x10, 0x4c, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x50, 0x55, 0x5f, 0x55, 0x53, 0x45,
	0x44, 0x5f, 0x47, 0x54, 0x54, 0x10, 0x4d, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x50, 0x55, 0x5f, 0x46,
	0x52, 0x45, 0x45, 0x5f, 0x47, 0x54, 0x54, 0x10, 0x4e, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x50, 0x55,
	0x5f, 0x45, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x43, 0x41,
	0x10, 0x4f, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x43, 0x41, 0x10, 0x50, 0x12, 0x17, 0x0a,
	0x13, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x5f, 0x56, 0x43, 0x4e, 0x10, 0x51, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43,
	0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x56, 0x43, 0x4e, 0x10,
	0x52, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x5f, 0x4a, 0x50, 0x45, 0x47, 0x10, 0x53, 0x12, 0x1a, 0x0a, 0x16, 0x47,
	0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x5f, 0x4a, 0x50, 0x45, 0x47, 0x10, 0x54, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x50, 0x55, 0x5f, 0x45,
	0x43, 0x43, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x48, 0x10, 0x55, 0x12,
	0x18, 0x0a, 0x14, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x48, 0x10, 0x56, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x50, 0x55,
	0x5f, 0x45, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x50, 0x49,
	0x4f, 0x10, 0x57, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x50, 0x55, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x55,
	0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x50, 0x49, 0x4f, 0x10, 0x58, 0x12,
	0x0e, 0x0a, 0x0a, 0x47, 0x50, 0x55, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x10, 0x59, 0x12,
	0x14, 0x0a, 0x10, 0x47, 0x50, 0x55, 0x5f, 0x58, 0x47, 0x4d, 0x49, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x52, 0x58, 0x10, 0x5a, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x50, 0x55, 0x5f, 0x58, 0x47, 0x4d,
	0x49, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x58, 0x10, 0x5b, 0x2a, 0xc0, 0x02, 0x0a, 0x0e,
	0x47, 0x50, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0c,
	0x0a, 0x08, 0x47, 0x50, 0x55, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x47, 0x50, 0x55, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50,
	0x4f, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52,
	0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4a, 0x4f, 0x42, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x0c,
	0x0a, 0x08, 0x4a, 0x4f, 0x42, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d,
	0x4a, 0x4f, 0x42, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53,
	0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c,
	0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f,
	0x52, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x42, 0x49, 0x4f, 0x53,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x4f,
	0x53, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x50, 0x55, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x10, 0x12, 0x1e,
	0x0a, 0x1a, 0x47, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x11, 0x42, 0x15,
	0x5a, 0x13, 0x67, 0x65, 0x6e, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_exporterconfig_proto_rawDescOnce sync.Once
	file_exporterconfig_proto_rawDescData = file_exporterconfig_proto_rawDesc
)

func file_exporterconfig_proto_rawDescGZIP() []byte {
	file_exporterconfig_proto_rawDescOnce.Do(func() {
		file_exporterconfig_proto_rawDescData = protoimpl.X.CompressGZIP(file_exporterconfig_proto_rawDescData)
	})
	return file_exporterconfig_proto_rawDescData
}

var file_exporterconfig_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_exporterconfig_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_exporterconfig_proto_goTypes = []any{
	(GPUMetricField)(0),         // 0: exportermetrics.GPUMetricField
	(GPUMetricLabel)(0),         // 1: exportermetrics.GPUMetricLabel
	(*GPUHealthThresholds)(nil), // 2: exportermetrics.GPUHealthThresholds
	(*GPUMetricConfig)(nil),     // 3: exportermetrics.GPUMetricConfig
	(*MetricConfig)(nil),        // 4: exportermetrics.MetricConfig
	nil,                         // 5: exportermetrics.GPUMetricConfig.CustomLabelsEntry
}
var file_exporterconfig_proto_depIdxs = []int32{
	2, // 0: exportermetrics.GPUMetricConfig.HealthThresholds:type_name -> exportermetrics.GPUHealthThresholds
	5, // 1: exportermetrics.GPUMetricConfig.CustomLabels:type_name -> exportermetrics.GPUMetricConfig.CustomLabelsEntry
	3, // 2: exportermetrics.MetricConfig.GPUConfig:type_name -> exportermetrics.GPUMetricConfig
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_exporterconfig_proto_init() }
func file_exporterconfig_proto_init() {
	if File_exporterconfig_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_exporterconfig_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GPUHealthThresholds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exporterconfig_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GPUMetricConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exporterconfig_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MetricConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_exporterconfig_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_exporterconfig_proto_goTypes,
		DependencyIndexes: file_exporterconfig_proto_depIdxs,
		EnumInfos:         file_exporterconfig_proto_enumTypes,
		MessageInfos:      file_exporterconfig_proto_msgTypes,
	}.Build()
	File_exporterconfig_proto = out.File
	file_exporterconfig_proto_rawDesc = nil
	file_exporterconfig_proto_goTypes = nil
	file_exporterconfig_proto_depIdxs = nil
}
