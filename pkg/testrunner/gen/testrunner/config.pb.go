//
//Copyright (c) Advanced Micro Devices, Inc. All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the \"License\");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an \"AS IS\" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: config.proto

package testrunner

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TestCategory is all TestRunner supported types of test
type TestCategory int32

const (
	// TestRunner will execute test for checking GPU Health
	TestCategory_GPU_HEALTH_CHECK TestCategory = 0
)

// Enum value maps for TestCategory.
var (
	TestCategory_name = map[int32]string{
		0: "GPU_HEALTH_CHECK",
	}
	TestCategory_value = map[string]int32{
		"GPU_HEALTH_CHECK": 0,
	}
)

func (x TestCategory) Enum() *TestCategory {
	p := new(TestCategory)
	*p = x
	return p
}

func (x TestCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[0].Descriptor()
}

func (TestCategory) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[0]
}

func (x TestCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestCategory.Descriptor instead.
func (TestCategory) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

// TestTrigger is all supported triggers for TestRunner to start a test
type TestTrigger int32

const (
	TestTrigger_AUTO_UNHEALTHY_GPU_WATCH TestTrigger = 0
	TestTrigger_PRE_START_JOB_CHECK      TestTrigger = 1
	TestTrigger_MANUAL                   TestTrigger = 2
)

// Enum value maps for TestTrigger.
var (
	TestTrigger_name = map[int32]string{
		0: "AUTO_UNHEALTHY_GPU_WATCH",
		1: "PRE_START_JOB_CHECK",
		2: "MANUAL",
	}
	TestTrigger_value = map[string]int32{
		"AUTO_UNHEALTHY_GPU_WATCH": 0,
		"PRE_START_JOB_CHECK":      1,
		"MANUAL":                   2,
	}
)

func (x TestTrigger) Enum() *TestTrigger {
	p := new(TestTrigger)
	*p = x
	return p
}

func (x TestTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[1].Descriptor()
}

func (TestTrigger) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[1]
}

func (x TestTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestTrigger.Descriptor instead.
func (TestTrigger) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

// / TestEventReason is the short string to represent the reason of raising event
type TestEventReason int32

const (
	TestEventReason_TestPassed       TestEventReason = 0
	TestEventReason_TestFailed       TestEventReason = 1
	TestEventReason_TestTimedOut     TestEventReason = 2
	TestEventReason_LogsExportPassed TestEventReason = 3
	TestEventReason_LogsExportFailed TestEventReason = 4
)

// Enum value maps for TestEventReason.
var (
	TestEventReason_name = map[int32]string{
		0: "TestPassed",
		1: "TestFailed",
		2: "TestTimedOut",
		3: "LogsExportPassed",
		4: "LogsExportFailed",
	}
	TestEventReason_value = map[string]int32{
		"TestPassed":       0,
		"TestFailed":       1,
		"TestTimedOut":     2,
		"LogsExportPassed": 3,
		"LogsExportFailed": 4,
	}
)

func (x TestEventReason) Enum() *TestEventReason {
	p := new(TestEventReason)
	*p = x
	return p
}

func (x TestEventReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestEventReason) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[2].Descriptor()
}

func (TestEventReason) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[2]
}

func (x TestEventReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestEventReason.Descriptor instead.
func (TestEventReason) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

type TestLogsExportConfig_CloudProvider int32

const (
	TestLogsExportConfig_Aws   TestLogsExportConfig_CloudProvider = 0
	TestLogsExportConfig_Azure TestLogsExportConfig_CloudProvider = 1
)

// Enum value maps for TestLogsExportConfig_CloudProvider.
var (
	TestLogsExportConfig_CloudProvider_name = map[int32]string{
		0: "Aws",
		1: "Azure",
	}
	TestLogsExportConfig_CloudProvider_value = map[string]int32{
		"Aws":   0,
		"Azure": 1,
	}
)

func (x TestLogsExportConfig_CloudProvider) Enum() *TestLogsExportConfig_CloudProvider {
	p := new(TestLogsExportConfig_CloudProvider)
	*p = x
	return p
}

func (x TestLogsExportConfig_CloudProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestLogsExportConfig_CloudProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[3].Descriptor()
}

func (TestLogsExportConfig_CloudProvider) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[3]
}

func (x TestLogsExportConfig_CloudProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestLogsExportConfig_CloudProvider.Descriptor instead.
func (TestLogsExportConfig_CloudProvider) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5, 0}
}

// config specification of TestRunner
type TestRunnerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TestRunner test config
	// key is test category and value is the struct for specific config
	TestConfig map[string]*TestCategoryConfig `protobuf:"bytes,1,rep,name=TestConfig,proto3" json:"TestConfig,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TestRunnerConfig) Reset() {
	*x = TestRunnerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRunnerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRunnerConfig) ProtoMessage() {}

func (x *TestRunnerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRunnerConfig.ProtoReflect.Descriptor instead.
func (*TestRunnerConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

func (x *TestRunnerConfig) GetTestConfig() map[string]*TestCategoryConfig {
	if x != nil {
		return x.TestConfig
	}
	return nil
}

// Test category's specific config
type TestCategoryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// define global or node specific test config
	// key is global or hostname, value is the struct for specifc config
	TestLocationTrigger map[string]*TestTriggerConfig `protobuf:"bytes,1,rep,name=TestLocationTrigger,proto3" json:"TestLocationTrigger,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TestCategoryConfig) Reset() {
	*x = TestCategoryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCategoryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCategoryConfig) ProtoMessage() {}

func (x *TestCategoryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCategoryConfig.ProtoReflect.Descriptor instead.
func (*TestCategoryConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

func (x *TestCategoryConfig) GetTestLocationTrigger() map[string]*TestTriggerConfig {
	if x != nil {
		return x.TestLocationTrigger
	}
	return nil
}

// Test trigger's specific config
type TestTriggerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is test trigger name, value is TestParameters
	TestParameters map[string]*TestParameters `protobuf:"bytes,1,rep,name=TestParameters,proto3" json:"TestParameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TestTriggerConfig) Reset() {
	*x = TestTriggerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTriggerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTriggerConfig) ProtoMessage() {}

func (x *TestTriggerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTriggerConfig.ProtoReflect.Descriptor instead.
func (*TestTriggerConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

func (x *TestTriggerConfig) GetTestParameters() map[string]*TestParameters {
	if x != nil {
		return x.TestParameters
	}
	return nil
}

type TestParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCases        []*TestParameter        `protobuf:"bytes,1,rep,name=TestCases,proto3" json:"TestCases,omitempty"`
	LogsExportConfig []*TestLogsExportConfig `protobuf:"bytes,2,rep,name=LogsExportConfig,proto3" json:"LogsExportConfig,omitempty"`
}

func (x *TestParameters) Reset() {
	*x = TestParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestParameters) ProtoMessage() {}

func (x *TestParameters) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestParameters.ProtoReflect.Descriptor instead.
func (*TestParameters) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3}
}

func (x *TestParameters) GetTestCases() []*TestParameter {
	if x != nil {
		return x.TestCases
	}
	return nil
}

func (x *TestParameters) GetLogsExportConfig() []*TestLogsExportConfig {
	if x != nil {
		return x.LogsExportConfig
	}
	return nil
}

type TestParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipe         string   `protobuf:"bytes,1,opt,name=Recipe,proto3" json:"Recipe,omitempty"`
	TimeoutSeconds uint32   `protobuf:"varint,2,opt,name=TimeoutSeconds,proto3" json:"TimeoutSeconds,omitempty"`
	Iterations     uint32   `protobuf:"varint,3,opt,name=Iterations,proto3" json:"Iterations,omitempty"`
	StopOnFailure  bool     `protobuf:"varint,4,opt,name=StopOnFailure,proto3" json:"StopOnFailure,omitempty"`
	DeviceIDs      []string `protobuf:"bytes,5,rep,name=DeviceIDs,proto3" json:"DeviceIDs,omitempty"`
}

func (x *TestParameter) Reset() {
	*x = TestParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestParameter) ProtoMessage() {}

func (x *TestParameter) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestParameter.ProtoReflect.Descriptor instead.
func (*TestParameter) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4}
}

func (x *TestParameter) GetRecipe() string {
	if x != nil {
		return x.Recipe
	}
	return ""
}

func (x *TestParameter) GetTimeoutSeconds() uint32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *TestParameter) GetIterations() uint32 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

func (x *TestParameter) GetStopOnFailure() bool {
	if x != nil {
		return x.StopOnFailure
	}
	return false
}

func (x *TestParameter) GetDeviceIDs() []string {
	if x != nil {
		return x.DeviceIDs
	}
	return nil
}

// maintain a tiny db to record TestRunner running status
type TestRunnerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is GPU GUID and value is the test recipe name
	TestStatus map[string]string `protobuf:"bytes,1,rep,name=TestStatus,proto3" json:"TestStatus,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TestRunnerStatus) Reset() {
	*x = TestRunnerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRunnerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRunnerStatus) ProtoMessage() {}

func (x *TestRunnerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRunnerStatus.ProtoReflect.Descriptor instead.
func (*TestRunnerStatus) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{6}
}

func (x *TestRunnerStatus) GetTestStatus() map[string]string {
	if x != nil {
		return x.TestStatus
	}
	return nil
}

var File_config_proto protoreflect.FileDescriptor

var file_config_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0xbf, 0x01, 0x0a, 0x10, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4c, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x5d, 0x0a,
	0x0f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x01, 0x0a,
	0x12, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x69, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x1a, 0x65,
	0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcd, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x0e, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x5d, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x09, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73,
	0x22, 0xb3, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x4f,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x24, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x50, 0x55, 0x5f,
	0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x00, 0x2a, 0x50,
	0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x18, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x5f,
	0x47, 0x50, 0x55, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x02,
	0x2a, 0x43, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x64,
	0x4f, 0x75, 0x74, 0x10, 0x02, 0x42, 0x10, 0x5a, 0x0e, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData = file_config_proto_rawDesc
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_proto_rawDescData)
	})
	return file_config_proto_rawDescData
}

var file_config_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_config_proto_goTypes = []any{
	(TestCategory)(0),                       // 0: testrunner.TestCategory
	(TestTrigger)(0),                        // 1: testrunner.TestTrigger
	(TestEventReason)(0),                    // 2: testrunner.TestEventReason
	(TestLogsExportConfig_CloudProvider)(0), // 3: testrunner.TestLogsExportConfig.CloudProvider
	(*TestRunnerConfig)(nil),                // 4: testrunner.TestRunnerConfig
	(*TestCategoryConfig)(nil),              // 5: testrunner.TestCategoryConfig
	(*TestTriggerConfig)(nil),               // 6: testrunner.TestTriggerConfig
	(*TestParameters)(nil),                  // 7: testrunner.TestParameters
	(*TestParameter)(nil),                   // 8: testrunner.TestParameter
	(*TestLogsExportConfig)(nil),            // 9: testrunner.TestLogsExportConfig
	(*TestRunnerStatus)(nil),                // 10: testrunner.TestRunnerStatus
	nil,                                     // 11: testrunner.TestRunnerConfig.TestConfigEntry
	nil,                                     // 12: testrunner.TestCategoryConfig.TestLocationTriggerEntry
	nil,                                     // 13: testrunner.TestTriggerConfig.TestParametersEntry
	nil,                                     // 14: testrunner.TestRunnerStatus.TestStatusEntry
}
var file_config_proto_depIdxs = []int32{
	11, // 0: testrunner.TestRunnerConfig.TestConfig:type_name -> testrunner.TestRunnerConfig.TestConfigEntry
	12, // 1: testrunner.TestCategoryConfig.TestLocationTrigger:type_name -> testrunner.TestCategoryConfig.TestLocationTriggerEntry
	13, // 2: testrunner.TestTriggerConfig.TestParameters:type_name -> testrunner.TestTriggerConfig.TestParametersEntry
	8,  // 3: testrunner.TestParameters.TestCases:type_name -> testrunner.TestParameter
	9,  // 4: testrunner.TestParameters.LogsExportConfig:type_name -> testrunner.TestLogsExportConfig
	14, // 5: testrunner.TestRunnerStatus.TestStatus:type_name -> testrunner.TestRunnerStatus.TestStatusEntry
	5,  // 6: testrunner.TestRunnerConfig.TestConfigEntry.value:type_name -> testrunner.TestCategoryConfig
	6,  // 7: testrunner.TestCategoryConfig.TestLocationTriggerEntry.value:type_name -> testrunner.TestTriggerConfig
	7,  // 8: testrunner.TestTriggerConfig.TestParametersEntry.value:type_name -> testrunner.TestParameters
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TestRunnerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TestCategoryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TestTriggerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TestParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TestParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TestLogsExportConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TestRunnerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		EnumInfos:         file_config_proto_enumTypes,
		MessageInfos:      file_config_proto_msgTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_rawDesc = nil
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
