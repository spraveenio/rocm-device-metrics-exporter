/*
Copyright (c) Advanced Micro Devices, Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";
package testrunner;
option go_package="gen/testrunner";

// TestCategory is all TestRunner supported types of test
enum TestCategory {
    // TestRunner will execute test for checking GPU Health
    GPU_HEALTH_CHECK            = 0;
}

// TestTrigger is all supported triggers for TestRunner to start a test
enum TestTrigger {
    AUTO_UNHEALTHY_GPU_WATCH    = 0;
    PRE_START_JOB_CHECK         = 1;
    MANUAL                      = 2;
}

// config specification of TestRunner
message TestRunnerConfig {
    // TestRunner system config
    TestRunnerSysConfig                SystemConfig   = 1;
    // TestRunner test config
    map<string, TestCategoryConfig>    TestConfig     = 2;
}

// system level config for TestRunner
message TestRunnerSysConfig {
    // Path to save TestRunner log
    string  RunnerLogPath = 1;
    // Directory to save test result logs
    string  ResultLogDir  = 2;
    // Path to maintain a tiny db of TestRunner running status
    string  StatusDBPath  = 3;
}

// Define global or node specific test config 
message TestCategoryConfig {
    map<string, TestLocationTrigger> TestLocationTrigger = 1;
}

message TestLocationTrigger {
    map<string, TestParameters>    TestParameters = 1;
}

message TestParameters {
    repeated TestParameter TestCases = 1;
}

message TestParameter {
    string  Recipe         = 1;
    uint32  TimeoutSeconds = 2;
    uint32  Iterations     = 3;
    bool    StopOnFailure  = 4;
}

// maintain a tiny db to record TestRunner running status
message TestRunnerStatus {
    // key is GPU GUID and value is the test recipe name
    map<string, string> RunningTest = 1;
}