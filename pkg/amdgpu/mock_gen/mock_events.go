/*
Copyright (c) Advanced Micro Devices, Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: /usr/src/github.com/ROCm/device-metrics-exporter/pkg/amdgpu//gen/amdgpu/events_grpc.pb.go
//
// Generated by this command:
//
//	mockgen --destination=/usr/src/github.com/ROCm/device-metrics-exporter/pkg/amdgpu/mock_gen/mock_events.go -package=mock_gen --source=/usr/src/github.com/ROCm/device-metrics-exporter/pkg/amdgpu//gen/amdgpu/events_grpc.pb.go
//

// Package mock_gen is a generated GoMock package.
package mock_gen

import (
	context "context"
	reflect "reflect"

	amdgpu "github.com/ROCm/device-metrics-exporter/pkg/amdgpu/gen/amdgpu"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockEventSvcClient is a mock of EventSvcClient interface.
type MockEventSvcClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventSvcClientMockRecorder
	isgomock struct{}
}

// MockEventSvcClientMockRecorder is the mock recorder for MockEventSvcClient.
type MockEventSvcClientMockRecorder struct {
	mock *MockEventSvcClient
}

// NewMockEventSvcClient creates a new mock instance.
func NewMockEventSvcClient(ctrl *gomock.Controller) *MockEventSvcClient {
	mock := &MockEventSvcClient{ctrl: ctrl}
	mock.recorder = &MockEventSvcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventSvcClient) EXPECT() *MockEventSvcClientMockRecorder {
	return m.recorder
}

// EventGet mocks base method.
func (m *MockEventSvcClient) EventGet(ctx context.Context, in *amdgpu.EventRequest, opts ...grpc.CallOption) (*amdgpu.EventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EventGet", varargs...)
	ret0, _ := ret[0].(*amdgpu.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventGet indicates an expected call of EventGet.
func (mr *MockEventSvcClientMockRecorder) EventGet(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventGet", reflect.TypeOf((*MockEventSvcClient)(nil).EventGet), varargs...)
}

// MockEventSvcServer is a mock of EventSvcServer interface.
type MockEventSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockEventSvcServerMockRecorder
	isgomock struct{}
}

// MockEventSvcServerMockRecorder is the mock recorder for MockEventSvcServer.
type MockEventSvcServerMockRecorder struct {
	mock *MockEventSvcServer
}

// NewMockEventSvcServer creates a new mock instance.
func NewMockEventSvcServer(ctrl *gomock.Controller) *MockEventSvcServer {
	mock := &MockEventSvcServer{ctrl: ctrl}
	mock.recorder = &MockEventSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventSvcServer) EXPECT() *MockEventSvcServerMockRecorder {
	return m.recorder
}

// EventGet mocks base method.
func (m *MockEventSvcServer) EventGet(arg0 context.Context, arg1 *amdgpu.EventRequest) (*amdgpu.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventGet", arg0, arg1)
	ret0, _ := ret[0].(*amdgpu.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventGet indicates an expected call of EventGet.
func (mr *MockEventSvcServerMockRecorder) EventGet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventGet", reflect.TypeOf((*MockEventSvcServer)(nil).EventGet), arg0, arg1)
}

// mustEmbedUnimplementedEventSvcServer mocks base method.
func (m *MockEventSvcServer) mustEmbedUnimplementedEventSvcServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEventSvcServer")
}

// mustEmbedUnimplementedEventSvcServer indicates an expected call of mustEmbedUnimplementedEventSvcServer.
func (mr *MockEventSvcServerMockRecorder) mustEmbedUnimplementedEventSvcServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEventSvcServer", reflect.TypeOf((*MockEventSvcServer)(nil).mustEmbedUnimplementedEventSvcServer))
}

// MockUnsafeEventSvcServer is a mock of UnsafeEventSvcServer interface.
type MockUnsafeEventSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEventSvcServerMockRecorder
	isgomock struct{}
}

// MockUnsafeEventSvcServerMockRecorder is the mock recorder for MockUnsafeEventSvcServer.
type MockUnsafeEventSvcServerMockRecorder struct {
	mock *MockUnsafeEventSvcServer
}

// NewMockUnsafeEventSvcServer creates a new mock instance.
func NewMockUnsafeEventSvcServer(ctrl *gomock.Controller) *MockUnsafeEventSvcServer {
	mock := &MockUnsafeEventSvcServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEventSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEventSvcServer) EXPECT() *MockUnsafeEventSvcServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEventSvcServer mocks base method.
func (m *MockUnsafeEventSvcServer) mustEmbedUnimplementedEventSvcServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEventSvcServer")
}

// mustEmbedUnimplementedEventSvcServer indicates an expected call of mustEmbedUnimplementedEventSvcServer.
func (mr *MockUnsafeEventSvcServerMockRecorder) mustEmbedUnimplementedEventSvcServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEventSvcServer", reflect.TypeOf((*MockUnsafeEventSvcServer)(nil).mustEmbedUnimplementedEventSvcServer))
}

// MockDebugEventSvcClient is a mock of DebugEventSvcClient interface.
type MockDebugEventSvcClient struct {
	ctrl     *gomock.Controller
	recorder *MockDebugEventSvcClientMockRecorder
	isgomock struct{}
}

// MockDebugEventSvcClientMockRecorder is the mock recorder for MockDebugEventSvcClient.
type MockDebugEventSvcClientMockRecorder struct {
	mock *MockDebugEventSvcClient
}

// NewMockDebugEventSvcClient creates a new mock instance.
func NewMockDebugEventSvcClient(ctrl *gomock.Controller) *MockDebugEventSvcClient {
	mock := &MockDebugEventSvcClient{ctrl: ctrl}
	mock.recorder = &MockDebugEventSvcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDebugEventSvcClient) EXPECT() *MockDebugEventSvcClientMockRecorder {
	return m.recorder
}

// EventGen mocks base method.
func (m *MockDebugEventSvcClient) EventGen(ctx context.Context, in *amdgpu.EventGenRequest, opts ...grpc.CallOption) (*amdgpu.EventGenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EventGen", varargs...)
	ret0, _ := ret[0].(*amdgpu.EventGenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventGen indicates an expected call of EventGen.
func (mr *MockDebugEventSvcClientMockRecorder) EventGen(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventGen", reflect.TypeOf((*MockDebugEventSvcClient)(nil).EventGen), varargs...)
}

// MockDebugEventSvcServer is a mock of DebugEventSvcServer interface.
type MockDebugEventSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockDebugEventSvcServerMockRecorder
	isgomock struct{}
}

// MockDebugEventSvcServerMockRecorder is the mock recorder for MockDebugEventSvcServer.
type MockDebugEventSvcServerMockRecorder struct {
	mock *MockDebugEventSvcServer
}

// NewMockDebugEventSvcServer creates a new mock instance.
func NewMockDebugEventSvcServer(ctrl *gomock.Controller) *MockDebugEventSvcServer {
	mock := &MockDebugEventSvcServer{ctrl: ctrl}
	mock.recorder = &MockDebugEventSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDebugEventSvcServer) EXPECT() *MockDebugEventSvcServerMockRecorder {
	return m.recorder
}

// EventGen mocks base method.
func (m *MockDebugEventSvcServer) EventGen(arg0 context.Context, arg1 *amdgpu.EventGenRequest) (*amdgpu.EventGenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventGen", arg0, arg1)
	ret0, _ := ret[0].(*amdgpu.EventGenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventGen indicates an expected call of EventGen.
func (mr *MockDebugEventSvcServerMockRecorder) EventGen(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventGen", reflect.TypeOf((*MockDebugEventSvcServer)(nil).EventGen), arg0, arg1)
}

// mustEmbedUnimplementedDebugEventSvcServer mocks base method.
func (m *MockDebugEventSvcServer) mustEmbedUnimplementedDebugEventSvcServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDebugEventSvcServer")
}

// mustEmbedUnimplementedDebugEventSvcServer indicates an expected call of mustEmbedUnimplementedDebugEventSvcServer.
func (mr *MockDebugEventSvcServerMockRecorder) mustEmbedUnimplementedDebugEventSvcServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDebugEventSvcServer", reflect.TypeOf((*MockDebugEventSvcServer)(nil).mustEmbedUnimplementedDebugEventSvcServer))
}

// MockUnsafeDebugEventSvcServer is a mock of UnsafeDebugEventSvcServer interface.
type MockUnsafeDebugEventSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDebugEventSvcServerMockRecorder
	isgomock struct{}
}

// MockUnsafeDebugEventSvcServerMockRecorder is the mock recorder for MockUnsafeDebugEventSvcServer.
type MockUnsafeDebugEventSvcServerMockRecorder struct {
	mock *MockUnsafeDebugEventSvcServer
}

// NewMockUnsafeDebugEventSvcServer creates a new mock instance.
func NewMockUnsafeDebugEventSvcServer(ctrl *gomock.Controller) *MockUnsafeDebugEventSvcServer {
	mock := &MockUnsafeDebugEventSvcServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDebugEventSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDebugEventSvcServer) EXPECT() *MockUnsafeDebugEventSvcServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDebugEventSvcServer mocks base method.
func (m *MockUnsafeDebugEventSvcServer) mustEmbedUnimplementedDebugEventSvcServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDebugEventSvcServer")
}

// mustEmbedUnimplementedDebugEventSvcServer indicates an expected call of mustEmbedUnimplementedDebugEventSvcServer.
func (mr *MockUnsafeDebugEventSvcServerMockRecorder) mustEmbedUnimplementedDebugEventSvcServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDebugEventSvcServer", reflect.TypeOf((*MockUnsafeDebugEventSvcServer)(nil).mustEmbedUnimplementedDebugEventSvcServer))
}
