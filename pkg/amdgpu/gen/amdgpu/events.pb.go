//
// Copyright(C) Advanced Micro Devices, Inc. All rights reserved.
//
// You may not use this software and documentation (if any) (collectively,
// the "Materials") except in compliance with the terms and conditions of
// the Software License Agreement included with the Materials or otherwise as
// set forth in writing and signed by you and an authorized signatory of AMD.
// If you do not have a copy of the Software License Agreement, contact your
// AMD representative for a copy.
//
// You agree that you will not reverse engineer or decompile the Materials,
// in whole or in part, except as allowed by applicable law.
//
// THE MATERIALS ARE DISTRIBUTED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR
// REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
//

//------------------------------------------------------------------------------
///
/// \file
/// protobuf specification for events
///
//------------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: events.proto

/*
Copyright (c) Advanced Micro Devices, Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package amdgpu

import (
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// event categories
type EventCategory int32

const (
	EventCategory_EVENT_CATEGORY_NONE EventCategory = 0
	// catch-all event category
	EventCategory_EVENT_CATEGORY_OTHER EventCategory = 255
)

// Enum value maps for EventCategory.
var (
	EventCategory_name = map[int32]string{
		0:   "EVENT_CATEGORY_NONE",
		255: "EVENT_CATEGORY_OTHER",
	}
	EventCategory_value = map[string]int32{
		"EVENT_CATEGORY_NONE":  0,
		"EVENT_CATEGORY_OTHER": 255,
	}
)

func (x EventCategory) Enum() *EventCategory {
	p := new(EventCategory)
	*p = x
	return p
}

func (x EventCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_events_proto_enumTypes[0].Descriptor()
}

func (EventCategory) Type() protoreflect.EnumType {
	return &file_events_proto_enumTypes[0]
}

func (x EventCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventCategory.Descriptor instead.
func (EventCategory) EnumDescriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{0}
}

// severity level of the event
type EventSeverity int32

const (
	EventSeverity_EVENT_SEVERITY_NONE     EventSeverity = 0
	EventSeverity_EVENT_SEVERITY_DEBUG    EventSeverity = 1 // only for debugging purposes
	EventSeverity_EVENT_SEVERITY_INFO     EventSeverity = 2 // no action needed
	EventSeverity_EVENT_SEVERITY_WARN     EventSeverity = 3 // no immediate action needed
	EventSeverity_EVENT_SEVERITY_CRITICAL EventSeverity = 4 // immediate attention required
)

// Enum value maps for EventSeverity.
var (
	EventSeverity_name = map[int32]string{
		0: "EVENT_SEVERITY_NONE",
		1: "EVENT_SEVERITY_DEBUG",
		2: "EVENT_SEVERITY_INFO",
		3: "EVENT_SEVERITY_WARN",
		4: "EVENT_SEVERITY_CRITICAL",
	}
	EventSeverity_value = map[string]int32{
		"EVENT_SEVERITY_NONE":     0,
		"EVENT_SEVERITY_DEBUG":    1,
		"EVENT_SEVERITY_INFO":     2,
		"EVENT_SEVERITY_WARN":     3,
		"EVENT_SEVERITY_CRITICAL": 4,
	}
)

func (x EventSeverity) Enum() *EventSeverity {
	p := new(EventSeverity)
	*p = x
	return p
}

func (x EventSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_events_proto_enumTypes[1].Descriptor()
}

func (EventSeverity) Type() protoreflect.EnumType {
	return &file_events_proto_enumTypes[1]
}

func (x EventSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventSeverity.Descriptor instead.
func (EventSeverity) EnumDescriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{1}
}

// event identifiers
type EventId int32

const (
	EventId_EVENT_ID_NONE             EventId = 0
	EventId_EVENT_ID_VM_PAGE_FAULT    EventId = 1
	EventId_EVENT_ID_THERMAL_THROTTLE EventId = 2
	EventId_EVENT_ID_GPU_PRE_RESET    EventId = 3
	EventId_EVENT_ID_GPU_POST_RESET   EventId = 4
	EventId_EVENT_ID_RING_HANG        EventId = 5
)

// Enum value maps for EventId.
var (
	EventId_name = map[int32]string{
		0: "EVENT_ID_NONE",
		1: "EVENT_ID_VM_PAGE_FAULT",
		2: "EVENT_ID_THERMAL_THROTTLE",
		3: "EVENT_ID_GPU_PRE_RESET",
		4: "EVENT_ID_GPU_POST_RESET",
		5: "EVENT_ID_RING_HANG",
	}
	EventId_value = map[string]int32{
		"EVENT_ID_NONE":             0,
		"EVENT_ID_VM_PAGE_FAULT":    1,
		"EVENT_ID_THERMAL_THROTTLE": 2,
		"EVENT_ID_GPU_PRE_RESET":    3,
		"EVENT_ID_GPU_POST_RESET":   4,
		"EVENT_ID_RING_HANG":        5,
	}
)

func (x EventId) Enum() *EventId {
	p := new(EventId)
	*p = x
	return p
}

func (x EventId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventId) Descriptor() protoreflect.EnumDescriptor {
	return file_events_proto_enumTypes[2].Descriptor()
}

func (EventId) Type() protoreflect.EnumType {
	return &file_events_proto_enumTypes[2]
}

func (x EventId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventId.Descriptor instead.
func (EventId) EnumDescriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{2}
}

// list of events
type EventList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of events
	Id []EventId `protobuf:"varint,1,rep,packed,name=Id,proto3,enum=amdgpu.EventId" json:"Id,omitempty"`
}

func (x *EventList) Reset() {
	*x = EventList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventList) ProtoMessage() {}

func (x *EventList) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventList.ProtoReflect.Descriptor instead.
func (*EventList) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{0}
}

func (x *EventList) GetId() []EventId {
	if x != nil {
		return x.Id
	}
	return nil
}

// attributes used to filter out events based
// NOTE:
// one of the following must be specified always or all events will be reported
// if no attributes are specified
type EventMatchAttrs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// severity of events of interest
	Severity EventSeverity `protobuf:"varint,1,opt,name=Severity,proto3,enum=amdgpu.EventSeverity" json:"Severity,omitempty"`
	// category of events of interest
	Category EventCategory `protobuf:"varint,2,opt,name=Category,proto3,enum=amdgpu.EventCategory" json:"Category,omitempty"`
}

func (x *EventMatchAttrs) Reset() {
	*x = EventMatchAttrs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMatchAttrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMatchAttrs) ProtoMessage() {}

func (x *EventMatchAttrs) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMatchAttrs.ProtoReflect.Descriptor instead.
func (*EventMatchAttrs) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{1}
}

func (x *EventMatchAttrs) GetSeverity() EventSeverity {
	if x != nil {
		return x.Severity
	}
	return EventSeverity_EVENT_SEVERITY_NONE
}

func (x *EventMatchAttrs) GetCategory() EventCategory {
	if x != nil {
		return x.Category
	}
	return EventCategory_EVENT_CATEGORY_NONE
}

// filter criteria for events
// NOTE:
//  1. if no filters specified, all events are considered
//  2. events matching with all specified filter criteria will be returned,
//     partail matching of specified filter criteria will not be considered
type EventFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*EventFilter_Events
	//	*EventFilter_MatchAttrs
	Filter isEventFilter_Filter `protobuf_oneof:"filter"`
	// list of GPUs of interest
	Gpu [][]byte `protobuf:"bytes,3,rep,name=Gpu,proto3" json:"Gpu,omitempty"`
}

func (x *EventFilter) Reset() {
	*x = EventFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventFilter) ProtoMessage() {}

func (x *EventFilter) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventFilter.ProtoReflect.Descriptor instead.
func (*EventFilter) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{2}
}

func (m *EventFilter) GetFilter() isEventFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *EventFilter) GetEvents() *EventList {
	if x, ok := x.GetFilter().(*EventFilter_Events); ok {
		return x.Events
	}
	return nil
}

func (x *EventFilter) GetMatchAttrs() *EventMatchAttrs {
	if x, ok := x.GetFilter().(*EventFilter_MatchAttrs); ok {
		return x.MatchAttrs
	}
	return nil
}

func (x *EventFilter) GetGpu() [][]byte {
	if x != nil {
		return x.Gpu
	}
	return nil
}

type isEventFilter_Filter interface {
	isEventFilter_Filter()
}

type EventFilter_Events struct {
	// list of events of interest
	Events *EventList `protobuf:"bytes,1,opt,name=Events,proto3,oneof"`
}

type EventFilter_MatchAttrs struct {
	// event attributes that are used to filter the events of interest
	MatchAttrs *EventMatchAttrs `protobuf:"bytes,2,opt,name=MatchAttrs,proto3,oneof"`
}

func (*EventFilter_Events) isEventFilter_Filter() {}

func (*EventFilter_MatchAttrs) isEventFilter_Filter() {}

// EventRequest is list of events of interest or some other matching criteria
// NOTE: if list of events is empty, all events are returned by EventGet()
type EventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// event filter expreses the events of interest
	Filter *EventFilter `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{3}
}

func (x *EventRequest) GetFilter() *EventFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// when subscribing for events, client is expected to send a list of all events
// of interest in one shot
type EventSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// event filter expreses the events of interest
	Filter *EventFilter `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *EventSubscribeRequest) Reset() {
	*x = EventSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSubscribeRequest) ProtoMessage() {}

func (x *EventSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSubscribeRequest.ProtoReflect.Descriptor instead.
func (*EventSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{4}
}

func (x *EventSubscribeRequest) GetFilter() *EventFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// event record
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique event identifier
	Id EventId `protobuf:"varint,1,opt,name=Id,proto3,enum=amdgpu.EventId" json:"Id,omitempty"`
	// event category
	Category EventCategory `protobuf:"varint,2,opt,name=Category,proto3,enum=amdgpu.EventCategory" json:"Category,omitempty"`
	// event severity
	Severity EventSeverity `protobuf:"varint,3,opt,name=Severity,proto3,enum=amdgpu.EventSeverity" json:"Severity,omitempty"`
	// event timestamp indicating when the event happened
	Time *timestamp.Timestamp `protobuf:"bytes,4,opt,name=Time,proto3" json:"Time,omitempty"`
	// uuid of the GPU device
	GPU []byte `protobuf:"bytes,5,opt,name=GPU,proto3" json:"GPU,omitempty"`
	// description of the event
	Description string `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{5}
}

func (x *Event) GetId() EventId {
	if x != nil {
		return x.Id
	}
	return EventId_EVENT_ID_NONE
}

func (x *Event) GetCategory() EventCategory {
	if x != nil {
		return x.Category
	}
	return EventCategory_EVENT_CATEGORY_NONE
}

func (x *Event) GetSeverity() EventSeverity {
	if x != nil {
		return x.Severity
	}
	return EventSeverity_EVENT_SEVERITY_NONE
}

func (x *Event) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Event) GetGPU() []byte {
	if x != nil {
		return x.GPU
	}
	return nil
}

func (x *Event) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// response to EventRequest
type EventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result of the API operation
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// specific error code, if any
	ErrorCode ErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=types.ErrorCode" json:"ErrorCode,omitempty"`
	// list of events if Status is OK
	Event []*Event `protobuf:"bytes,3,rep,name=Event,proto3" json:"Event,omitempty"`
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{6}
}

func (x *EventResponse) GetApiStatus() ApiStatus {
	if x != nil {
		return x.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (x *EventResponse) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_ERR_CODE_NONE
}

func (x *EventResponse) GetEvent() []*Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// event generate request
type EventGenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// event identifier list
	Id []EventId `protobuf:"varint,1,rep,packed,name=Id,proto3,enum=amdgpu.EventId" json:"Id,omitempty"`
	// GPUs on which events are reported on
	GPU [][]byte `protobuf:"bytes,2,rep,name=GPU,proto3" json:"GPU,omitempty"`
}

func (x *EventGenRequest) Reset() {
	*x = EventGenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventGenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventGenRequest) ProtoMessage() {}

func (x *EventGenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventGenRequest.ProtoReflect.Descriptor instead.
func (*EventGenRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{7}
}

func (x *EventGenRequest) GetId() []EventId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EventGenRequest) GetGPU() [][]byte {
	if x != nil {
		return x.GPU
	}
	return nil
}

// response to EventGenRequest
type EventGenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result of the API operation
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
}

func (x *EventGenResponse) Reset() {
	*x = EventGenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventGenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventGenResponse) ProtoMessage() {}

func (x *EventGenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventGenResponse.ProtoReflect.Descriptor instead.
func (*EventGenResponse) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{8}
}

func (x *EventGenResponse) GetApiStatus() ApiStatus {
	if x != nil {
		return x.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

var file_events_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptor.EnumValueOptions)(nil),
		ExtensionType: (*EventCategory)(nil),
		Field:         100001,
		Name:          "amdgpu.Category",
		Tag:           "varint,100001,opt,name=Category,enum=amdgpu.EventCategory",
		Filename:      "events.proto",
	},
	{
		ExtendedType:  (*descriptor.EnumValueOptions)(nil),
		ExtensionType: (*EventSeverity)(nil),
		Field:         100002,
		Name:          "amdgpu.Severity",
		Tag:           "varint,100002,opt,name=Severity,enum=amdgpu.EventSeverity",
		Filename:      "events.proto",
	},
	{
		ExtendedType:  (*descriptor.EnumValueOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         100003,
		Name:          "amdgpu.Description",
		Tag:           "bytes,100003,opt,name=Description",
		Filename:      "events.proto",
	},
}

// Extension fields to descriptor.EnumValueOptions.
var (
	// event category
	//
	// optional amdgpu.EventCategory Category = 100001;
	E_Category = &file_events_proto_extTypes[0]
	// event severity
	//
	// optional amdgpu.EventSeverity Severity = 100002;
	E_Severity = &file_events_proto_extTypes[1]
	// description for the event
	//
	// optional string Description = 100003;
	E_Description = &file_events_proto_extTypes[2]
)

var File_events_proto protoreflect.FileDescriptor

var file_events_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2c, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x02, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x6d, 0x64, 0x67,
	0x70, 0x75, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61,
	0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x91, 0x01,
	0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x70, 0x75, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x03, 0x47, 0x70, 0x75, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x3b, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x44,
	0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0xf2, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x61, 0x6d, 0x64,
	0x67, 0x70, 0x75, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x47, 0x50, 0x55, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x0d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x41,
	0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x09, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x6d, 0x64,
	0x67, 0x70, 0x75, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x44, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x03, 0x47, 0x50, 0x55, 0x22, 0x42, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x41, 0x70,
	0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x09, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x43, 0x0a, 0x0d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xff, 0x01, 0x2a,
	0x91, 0x01, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x42,
	0x55, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x57, 0x41, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x04, 0x2a, 0x93, 0x03, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x1a, 0x19, 0x88, 0xea, 0x30, 0x00, 0x90, 0xea, 0x30, 0x01, 0x9a, 0xea, 0x30, 0x0d,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a,
	0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x56, 0x4d, 0x5f, 0x50, 0x41, 0x47,
	0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x1a, 0x21, 0x88, 0xea, 0x30, 0x00, 0x90,
	0xea, 0x30, 0x01, 0x9a, 0xea, 0x30, 0x15, 0x56, 0x4d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x19,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x48, 0x45, 0x52, 0x4d, 0x41, 0x4c,
	0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x41, 0x88, 0xea, 0x30,
	0x00, 0x90, 0xea, 0x30, 0x02, 0x9a, 0xea, 0x30, 0x35, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x68, 0x61, 0x73, 0x20, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x20, 0x64, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x69, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x50, 0x55, 0x5f, 0x50,
	0x52, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x03, 0x1a, 0x25, 0x88, 0xea, 0x30, 0x00,
	0x90, 0xea, 0x30, 0x02, 0x9a, 0xea, 0x30, 0x19, 0x47, 0x50, 0x55, 0x20, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x61, 0x70, 0x70, 0x65,
	0x6e, 0x12, 0x3b, 0x0a, 0x17, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x50,
	0x55, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x04, 0x1a, 0x1e,
	0x88, 0xea, 0x30, 0x00, 0x90, 0xea, 0x30, 0x03, 0x9a, 0xea, 0x30, 0x12, 0x47, 0x50, 0x55, 0x20,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x39,
	0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x48, 0x41, 0x4e, 0x47, 0x10, 0x05, 0x1a, 0x21, 0x88, 0xea, 0x30, 0x00, 0x90, 0xea, 0x30, 0x03,
	0x9a, 0xea, 0x30, 0x15, 0x47, 0x50, 0x55, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x20,
	0x72, 0x69, 0x6e, 0x67, 0x20, 0x68, 0x61, 0x6e, 0x67, 0x32, 0x45, 0x0a, 0x08, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x76, 0x63, 0x12, 0x39, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x65,
	0x74, 0x12, 0x14, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x32, 0x50, 0x0a, 0x0d, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x76,
	0x63, 0x12, 0x3f, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x17, 0x2e,
	0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x3a, 0x56, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xa1, 0x8d, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x6d, 0x64, 0x67,
	0x70, 0x75, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3a, 0x56, 0x0a, 0x08, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa2, 0x8d, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x3a, 0x45, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa3, 0x8d, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x5a, 0x0a, 0x67, 0x65, 0x6e,
	0x2f, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_events_proto_rawDescOnce sync.Once
	file_events_proto_rawDescData = file_events_proto_rawDesc
)

func file_events_proto_rawDescGZIP() []byte {
	file_events_proto_rawDescOnce.Do(func() {
		file_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_events_proto_rawDescData)
	})
	return file_events_proto_rawDescData
}

var file_events_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_events_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_events_proto_goTypes = []any{
	(EventCategory)(0),                  // 0: amdgpu.EventCategory
	(EventSeverity)(0),                  // 1: amdgpu.EventSeverity
	(EventId)(0),                        // 2: amdgpu.EventId
	(*EventList)(nil),                   // 3: amdgpu.EventList
	(*EventMatchAttrs)(nil),             // 4: amdgpu.EventMatchAttrs
	(*EventFilter)(nil),                 // 5: amdgpu.EventFilter
	(*EventRequest)(nil),                // 6: amdgpu.EventRequest
	(*EventSubscribeRequest)(nil),       // 7: amdgpu.EventSubscribeRequest
	(*Event)(nil),                       // 8: amdgpu.Event
	(*EventResponse)(nil),               // 9: amdgpu.EventResponse
	(*EventGenRequest)(nil),             // 10: amdgpu.EventGenRequest
	(*EventGenResponse)(nil),            // 11: amdgpu.EventGenResponse
	(*timestamp.Timestamp)(nil),         // 12: google.protobuf.Timestamp
	(ApiStatus)(0),                      // 13: types.ApiStatus
	(ErrorCode)(0),                      // 14: types.ErrorCode
	(*descriptor.EnumValueOptions)(nil), // 15: google.protobuf.EnumValueOptions
}
var file_events_proto_depIdxs = []int32{
	2,  // 0: amdgpu.EventList.Id:type_name -> amdgpu.EventId
	1,  // 1: amdgpu.EventMatchAttrs.Severity:type_name -> amdgpu.EventSeverity
	0,  // 2: amdgpu.EventMatchAttrs.Category:type_name -> amdgpu.EventCategory
	3,  // 3: amdgpu.EventFilter.Events:type_name -> amdgpu.EventList
	4,  // 4: amdgpu.EventFilter.MatchAttrs:type_name -> amdgpu.EventMatchAttrs
	5,  // 5: amdgpu.EventRequest.Filter:type_name -> amdgpu.EventFilter
	5,  // 6: amdgpu.EventSubscribeRequest.Filter:type_name -> amdgpu.EventFilter
	2,  // 7: amdgpu.Event.Id:type_name -> amdgpu.EventId
	0,  // 8: amdgpu.Event.Category:type_name -> amdgpu.EventCategory
	1,  // 9: amdgpu.Event.Severity:type_name -> amdgpu.EventSeverity
	12, // 10: amdgpu.Event.Time:type_name -> google.protobuf.Timestamp
	13, // 11: amdgpu.EventResponse.ApiStatus:type_name -> types.ApiStatus
	14, // 12: amdgpu.EventResponse.ErrorCode:type_name -> types.ErrorCode
	8,  // 13: amdgpu.EventResponse.Event:type_name -> amdgpu.Event
	2,  // 14: amdgpu.EventGenRequest.Id:type_name -> amdgpu.EventId
	13, // 15: amdgpu.EventGenResponse.ApiStatus:type_name -> types.ApiStatus
	15, // 16: amdgpu.Category:extendee -> google.protobuf.EnumValueOptions
	15, // 17: amdgpu.Severity:extendee -> google.protobuf.EnumValueOptions
	15, // 18: amdgpu.Description:extendee -> google.protobuf.EnumValueOptions
	0,  // 19: amdgpu.Category:type_name -> amdgpu.EventCategory
	1,  // 20: amdgpu.Severity:type_name -> amdgpu.EventSeverity
	6,  // 21: amdgpu.EventSvc.EventGet:input_type -> amdgpu.EventRequest
	10, // 22: amdgpu.DebugEventSvc.EventGen:input_type -> amdgpu.EventGenRequest
	9,  // 23: amdgpu.EventSvc.EventGet:output_type -> amdgpu.EventResponse
	11, // 24: amdgpu.DebugEventSvc.EventGen:output_type -> amdgpu.EventGenResponse
	23, // [23:25] is the sub-list for method output_type
	21, // [21:23] is the sub-list for method input_type
	19, // [19:21] is the sub-list for extension type_name
	16, // [16:19] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_events_proto_init() }
func file_events_proto_init() {
	if File_events_proto != nil {
		return
	}
	file_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_events_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EventList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EventMatchAttrs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*EventFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*EventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*EventSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*EventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*EventGenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*EventGenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_events_proto_msgTypes[2].OneofWrappers = []any{
		(*EventFilter_Events)(nil),
		(*EventFilter_MatchAttrs)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_events_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 3,
			NumServices:   2,
		},
		GoTypes:           file_events_proto_goTypes,
		DependencyIndexes: file_events_proto_depIdxs,
		EnumInfos:         file_events_proto_enumTypes,
		MessageInfos:      file_events_proto_msgTypes,
		ExtensionInfos:    file_events_proto_extTypes,
	}.Build()
	File_events_proto = out.File
	file_events_proto_rawDesc = nil
	file_events_proto_goTypes = nil
	file_events_proto_depIdxs = nil
}
